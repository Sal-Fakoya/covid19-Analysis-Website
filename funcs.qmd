---
title: Custom Functions 
date: "2025-02-11"
toc: true
editor: 
  markdown: 
    wrap: 72
execute: 
  warning: false
  freeze: 'auto'
  include: true
---

# Custom EDA Functions Documentation

This page explains the purpose and usage of custom functions developed
for the COVID-19 exploratory data analysis performed in this project.

# Dependencies

All functions require:

-   tidyverse for data analysis

-   cowplot for plot grid

-   viridis for plot palette

-   tidystringdist (for `matchStates` function)

```{r}
#| echo: false
library(tidyverse)
```

## 1. Data Preparation Functions

### `renameState(df)`

**Purpose:** Standardizes state column naming across datasets

**Parameters:** `df`: Input dataframe

**Description:**\
Renames any column containing "state" in its name to "state". Ensures
consistent column naming across different datasets.

```{r}
renameState <- function(df) {
  df %>% rename_with(~ "state", contains("state"))
}
```

### `matchStates(states_base=states_list, data, col_name)`

**Purpose:**

-   Also for data wrangling purpose, it fuzzy matches the U.S state
    names to a `states_base` column as reference.

-   The `states_base` used in my EDA is from the `datasets::state.name`.

**Parameters:**

-   `states_base`: Reference list of states (default: `states_list` in
    the `datasets::state.name`)

-   `data`: Dataset containing state names to match - `col_name` Name of
    column containing state names in the `data` parameter.

**Description:**

Uses Optimal String Alignment (OSA) distance to match state names
between datasets and reference list. Helps resolve naming
inconsistencies.

```{r}
matchStates <- function(states_base = states_list,
                        data,
                        col_name)
{
  require(tidystringdist)
  require(rlang)
  
  # extract unique state names from given data source.
  states_data <- data %>% 
    distinct(state)
  
  # create table of all combinations: state pairs:
  states_comb <- expand.grid(states_base = states_list %>% 
                               pull(state_base),
                             state = states_data %>% pull(state))
  
  # compute string distance:
  t1 <- tidy_stringdist(df = states_comb,
                  v1 = states_base,
                  v2 = state,
                  method = "osa") %>% 
    # sort best name match per state and add matching rank:
    arrange(states_base, osa) %>% 
    group_by(states_base) %>% 
    mutate(rank = row_number()) %>% 
    ungroup() %>% 
    # filter top ranks:
    filter(rank == 1) %>% 
    select(states_base, {{ col_name }} := state)
  
  print(t1)
  
  
  # t2 is an easier fix...
  t2 <- tidy_stringdist(df = states_comb,
                        v1 = states_base,
                        v2 = state,
                        method = "osa") %>% 
    filter(osa == 0) %>% 
    select(states_base, state) %>% 
    arrange(states_base)
  
  return (t1)
  
}

```

## 2. Data Inspection Functions

### `countNA(df)`

**Purpose:** Analyzes missing values patterns

**Parameters:** `df`: Input dataframe

**Outputs:**

-   Dataframe with NA counts and percentages

-   Dual plots (absolute counts and percentages)

**Description:**\
Provides missing value analysis with numerical summary and visual
representation.

```{r}
countNA <- function(df) {
  require(tidyverse)
  require(cowplot)
  
  # Count NAs using summarise across all columns
  df_na_count <- df %>%
    summarise(across(everything(), ~ sum(is.na(.)))) %>%
    pivot_longer(cols = everything(), names_to = "col", values_to = "NAs") %>%
    mutate(NA_perc = round(NAs / nrow(df) * 100, 2))
  
  print(df_na_count)
  
  # Absolute NA count plot
  p1 <- df_na_count %>%
    ggplot(aes(x = col, y = NAs, fill = col)) +
    geom_col(show.legend = FALSE) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, face = "bold")) +
    scale_fill_viridis_d(option = "magma") +
    scale_x_discrete(labels = function(x) str_trunc(x, width = 10, ellipsis = "...")) +
    geom_text(aes(label = NAs), vjust = 0)
  
  # Relative NA percentage plot
  p2 <- df_na_count %>%
    ggplot(aes(x = col, y = NA_perc, fill = col)) +
    geom_col(show.legend = FALSE) +
    scale_y_continuous(limits = c(0, 100)) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, face = "bold")) +
    scale_fill_viridis_d(option = "magma") +
    scale_x_discrete(labels = function(x) str_trunc(x, width = 12, ellipsis = "...")) +
    geom_text(aes(label = paste0(NA_perc, "%")), vjust = 0)
  
  plot_grid(p1, p2, nrow = 2)
}
```

### `checkTimeSpan(df)`

**Purpose:**

Checks distinct dates for each state and returns a bar plot showing the
maximum and minimum date, thereby allowing us to check states with
useful data.

**Parameters:**

-   `df`: Input dataframe with date column

**Outputs:**

-   Date range on a bar plot

**Description:**

-   returns a barplot showing the states with their maximum and minimum
    dates. There is no conclusion to be made based on these plots,
    however, I found Puerto Rico and United States as part of the states
    on this plot. This will be filtered out later in the data cleaning
    process.

## 3. Visualization Functions

### `plotConfirmedCasesTotal(data=df.main, region.group)`

**Purpose:** Tracks pandemic progression based on region.

**Parameters:**

-   `data`: Main dataframe (default: `df.main`)

-   `region.group`: Geographic region to analyze

**Output:**

-   2x2 panel plot with absolute/relative infection cases and deaths
    over time on a state level.

-   Auto-saves PNG to `./explore` directory and creates the ./explore
    directory if it does not exist.

**Description:**

Shows both absolute counts and population-adjusted percentages for
COVID-19 metrics across states for each `region.group`

```{r}

plotConfirmedCasesTotal <- function(data = df.main, region.group)
{
  
  # data:
  plot_data <- data %>% 
    filter(region_group == region.group)
  
  # confirmed cases absolute count
  p11 <- plot_data %>% 
    ggplot(mapping = aes(x = date,
                         y = confirmed_total,
                         group = state,
                         color = state)) +
    geom_line() +
    geom_point(alpha = 0.7) +
    scale_colour_viridis_d() +
    xlab("Date") +
    ylab("Number of Confirmed cases total") +
    ggtitle(paste("Infected Cases /", region.group, sep = " ")) +
    theme_minimal()
  
  print(p11)
  
  ## confirmed cases relative count:
  p21 <- plot_data %>% 
    ggplot(mapping = aes(x = date,
                         y = confirmed_totalPerc,
                         group = state,
                         color = state)) +
    geom_line() +
    geom_point(alpha = 0.7) +
    scale_colour_viridis_d() +
    xlab("Date") +
    ylab("Percentage(%) of Confirmed cases total") +
    ggtitle(paste("Infected Cases /", region.group, sep = " ")) +
    theme_minimal()
  
  print(p21)
  
  
  # death cases absolute count
  p12 <- plot_data %>% 
    ggplot(mapping = aes(x = date,
                         y = deaths_total,
                         group = state,
                         color = state)) +
    geom_line() +
    geom_point(alpha = 0.7) +
    scale_colour_viridis_d() +
    xlab("Date") +
    ylab("Number of Deaths total") +
    ggtitle(paste("Death /", region.group, sep = " ")) +
    theme_minimal()
  
  print(p12)
  
  ## confirmed cases relative count:
  p22 <- plot_data %>% 
    ggplot(mapping = aes(x = date,
                         y = deaths_totalPerc,
                         group = state,
                         color = state)) +
    geom_line() +
    geom_point(alpha = 0.7) +
    scale_colour_viridis_d() +
    xlab("Date") +
    ylab("Percentage(%) of Deaths total") +
    ggtitle(paste("Death /", region.group, sep = " ")) +
    theme_minimal()
  
  print(p22)
  
  plot <- plot_grid(p11, p12, p21, p22, nrow = 2, ncol = 2)
  
  #plot_export
  
  if (!dir.exists("./explore"))
  {
    dir.create("./explore")
  }
  
  ggsave(filename = paste("./explore/01_confirmed_cases_and_deaths",
                          region.group, ".png"),
         plot = plot,
         width = 30, height = 20, 
         units = "cm",
         dpi = 1200)
  
}

```

### `plot7DayAverage(data=df.main, region.group, output_dir="./explore")`

**Purpose:** Analyzes trend of Covid-19 infection cases and death trend
on a 7 day average for each region.

**Parameters:**

-   `data`: Main dataframe (default: `df.main`)

-   `region.group`: Geographic region

<!-- -->

-   `output_dir`: directory to save plot (default: `./explore`)

**Features:**

-   Error checking for valid region groups

-   Modular plot generation

-   Standardized plot-saving format

**Output:**

Dual time series plots of 7-day moving averages for infection cases and
deaths.

```{r}
plot7DayAverage <- function(data = df.main, region.group, output_dir = "./explore") 
  {
  # Ensure necessary libraries are loaded
  require(ggplot2)
  require(cowplot)
  require(viridis)
  require(rlang)
  
  # Verify that region.group exists
  if (!region.group %in% unique(data$region_group)) {
    stop("Error: The specified region.group does not exist in the data.")
  }
  
  # Filter data
  plot_data <- data %>% 
    filter(region_group == region.group)
  
  # Helper function for creating plots
  create_plot <- function(data = plot.data, 
                          y_var, title_text, y_label_text) {
    data %>%
      ggplot(aes(x = date, y = {{ y_var }}, group = state, color = state)) +
      geom_line(alpha = 0.8, linewidth = 0.8) +
      geom_point(alpha = 0.8, size = 0.8, show.legend = FALSE) +
      scale_colour_viridis_d() +
      labs(title = paste(title_text, "-", region.group),
           x = "Date",
           y = y_label_text,
           color = "State") +
      theme_minimal() +
      theme(plot.title = element_text(hjust = 0.5))
  }
  
  # Create plots
  p1 <- create_plot(plot_data, 
                    `confirmed_daily_cases 7d Avg`, 
                    "Infected Daily Cases", 
                    "7-Day Moving Average of Confirmed Cases")
  p2 <- create_plot(plot_data, 
                    `death_daily_cases 7d Avg`, 
                    "Deaths", 
                    "7-Day Moving Average of Deaths")
  
  # Combine plots
  combined_plot <- plot_grid(p1, p2, nrow = 2)
  
  # Create output directory if it doesn't exist
  if (!dir.exists(output_dir)) {
    dir.create(output_dir)
  }
  
  # Construct filename
  filename <- file.path(output_dir, paste0("03_confirmed_cases_and_deaths_on_7Day_Avg_", region.group, ".png"))
  
  # Save plot
  ggsave(filename = filename,
         plot = combined_plot,
         width = 35, height = 25, units = "cm",
         dpi = 1200)
  
  # Return the combined plot
  return(combined_plot)
}

```

### `plotCovid19Map_overTime(data=df.main, var, output_dir="./explore")`

**Purpose:** Show on map how number of COVID-case have changed over time
(monthly)

**Parameters:**

-   `data`: Main dataframe

-   `var`: Variable to visualize
    (`confirmed_total/deaths_total/vaccine_doses_total`)

-   `output_dir:` Save location for plots to `./explore` directory by
    default and creates the directory if it does not exist.

**Output:**

Faceted chloropleth map showing variable `var` evolution across monthly
snapshots.

```{r}
plotCovid19Map_overTime <- function(data = df.main, var,
                                    output_dir = "./explore") 
  {
  
  # Ensure the necessary libraries are loaded
  require(ggplot2)
  require(cowplot)
  require(viridis)
  require(rlang)
  
  # Filter and prepare data
  plot_data <- data %>% 
    filter(date_snapshot_flag) %>% 
    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% 
    left_join(map_data("state"), by = c("state_" = "region"))
  
  # Helper function for creating plots
  create_plot <- function(data, var, title_text) {
    data %>%
      ggplot(aes(x = long, y = lat, group = group)) +
      geom_polygon(aes_string(fill = var), 
                   color = "black", show.legend = TRUE) +
      facet_wrap(~ date) +
      ggtitle(title_text) +
      theme_bw() + 
      theme(axis.ticks = element_blank(),
            axis.text = element_blank(),
            plot.title = element_text(hjust = 0.5)) + 
      scale_fill_gradient(low = "white", high = "red")
  }
  
  # Create plot based on variable
  title <- paste("Map of Covid-19", gsub("_", " ", var), "Over Time")
  plot <- create_plot(plot_data, var, title)
  
  # Create output directory if it doesn't exist
  if (!dir.exists(output_dir)) {
    dir.create(output_dir)
  }
  
  # Construct filename
  filename <- file.path(output_dir, paste0("06_Map_of_", var, "_over_time.png"))
  
  # Save plot
  ggsave(filename = filename, plot = plot, width = 35,
         height = 25, units = "cm", dpi = 1200)
  
  # Return the plot
  return(plot)
}


```

## 4 Advanced Analysis Function:

### `plotCovid19Indicators_stateLevel(data=df.main, state_selection, output_dir="./explore")`

```{r}

plotCovid19Map_overTime <- function(data = df.main, var,
                                    output_dir = "./explore") 
  {
  
  # Ensure the necessary libraries are loaded
  require(ggplot2)
  require(cowplot)
  require(viridis)
  require(rlang)
  
  # Filter and prepare data
  plot_data <- data %>% 
    filter(date_snapshot_flag) %>% 
    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% 
    left_join(map_data("state"), by = c("state_" = "region"))
  
  # Helper function for creating plots
  create_plot <- function(data, var, title_text) {
    data %>%
      ggplot(aes(x = long, y = lat, group = group)) +
      geom_polygon(aes_string(fill = var), 
                   color = "black", show.legend = TRUE) +
      facet_wrap(~ date) +
      ggtitle(title_text) +
      theme_bw() + 
      theme(axis.ticks = element_blank(),
            axis.text = element_blank(),
            plot.title = element_text(hjust = 0.5)) + 
      scale_fill_gradient(low = "white", high = "red")
  }
  
  # Create plot based on variable
  title <- paste("Map of Covid-19", gsub("_", " ", var), "Over Time")
  plot <- create_plot(plot_data, var, title)
  
  # Create output directory if it doesn't exist
  if (!dir.exists(output_dir)) {
    dir.create(output_dir)
  }
  
  # Construct filename
  filename <- file.path(output_dir, paste0("06_Map_of_", var, "_over_time.png"))
  
  # Save plot
  ggsave(filename = filename, plot = plot, width = 35,
         height = 25, units = "cm", dpi = 1200)
  
  # Return the plot
  return(plot)
}


```

**Purpose:**

Plots Covid-19 Indicators (infection, deaths and government response) at
the state-level monthly (there is a date snapshot flag for every 30th
day captured in the in the EDA section before this function is called).

**Parameters:**

-   `data`: Main dataframe (default: `df.main`)

-   `state_selection`: Target state

-   `output_dir`: Saves plot to location (`"./explore"` by default) and
    creates the directory if it does not exist.

**Outputs:**

-    Stacked area chart: Cumulative totals

-    Log-scale time series: 7-day averages

-   Government response metrics

**Description:** Plots and saves the stacked area chart in the
`output_dir`.

# Usage Notes

-   File outputs are automatically saved to `./explore` directory.
-   Date column must be present and properly formatted.
-   Region groups must exist in dataframe's `region_group` column.
-   String matching functions work best with clean text data.
-   Map functions require `state_` column existing in the dataframe in
    lowercase state names
