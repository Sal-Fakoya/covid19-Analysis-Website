{"title":"Custom Functions","markdown":{"yaml":{"title":"Custom Functions","date":"2025-02-11","toc":true,"editor":{"markdown":{"wrap":72}},"execute":{"warning":false,"freeze":"auto","include":true}},"headingText":"Custom EDA Functions Documentation","containsRefs":false,"markdown":"\n\n\nThis page explains the purpose and usage of custom functions developed\nfor the COVID-19 exploratory data analysis performed in this project.\n\n# Dependencies\n\nAll functions require:\n\n-   tidyverse for data analysis\n\n-   cowplot for plot grid\n\n-   viridis for plot palette\n\n-   tidystringdist (for `matchStates` function)\n\n```{r}\n#| echo: false\nlibrary(tidyverse)\n```\n\n## 1. Data Preparation Functions\n\n### `renameState(df)`\n\n**Purpose:** Standardizes state column naming across datasets\n\n**Parameters:** `df`: Input dataframe\n\n**Description:**\\\nRenames any column containing \"state\" in its name to \"state\". Ensures\nconsistent column naming across different datasets.\n\n```{r}\nrenameState <- function(df) {\n  df %>% rename_with(~ \"state\", contains(\"state\"))\n}\n```\n\n### `matchStates(states_base=states_list, data, col_name)`\n\n**Purpose:**\n\n-   Also for data wrangling purpose, it fuzzy matches the U.S state\n    names to a `states_base` column as reference.\n\n-   The `states_base` used in my EDA is from the `datasets::state.name`.\n\n**Parameters:**\n\n-   `states_base`: Reference list of states (default: `states_list` in\n    the `datasets::state.name`)\n\n-   `data`: Dataset containing state names to match - `col_name` Name of\n    column containing state names in the `data` parameter.\n\n**Description:**\n\nUses Optimal String Alignment (OSA) distance to match state names\nbetween datasets and reference list. Helps resolve naming\ninconsistencies.\n\n```{r}\nmatchStates <- function(states_base = states_list,\n                        data,\n                        col_name)\n{\n  require(tidystringdist)\n  require(rlang)\n  \n  # extract unique state names from given data source.\n  states_data <- data %>% \n    distinct(state)\n  \n  # create table of all combinations: state pairs:\n  states_comb <- expand.grid(states_base = states_list %>% \n                               pull(state_base),\n                             state = states_data %>% pull(state))\n  \n  # compute string distance:\n  t1 <- tidy_stringdist(df = states_comb,\n                  v1 = states_base,\n                  v2 = state,\n                  method = \"osa\") %>% \n    # sort best name match per state and add matching rank:\n    arrange(states_base, osa) %>% \n    group_by(states_base) %>% \n    mutate(rank = row_number()) %>% \n    ungroup() %>% \n    # filter top ranks:\n    filter(rank == 1) %>% \n    select(states_base, {{ col_name }} := state)\n  \n  print(t1)\n  \n  \n  # t2 is an easier fix...\n  t2 <- tidy_stringdist(df = states_comb,\n                        v1 = states_base,\n                        v2 = state,\n                        method = \"osa\") %>% \n    filter(osa == 0) %>% \n    select(states_base, state) %>% \n    arrange(states_base)\n  \n  return (t1)\n  \n}\n\n```\n\n## 2. Data Inspection Functions\n\n### `countNA(df)`\n\n**Purpose:** Analyzes missing values patterns\n\n**Parameters:** `df`: Input dataframe\n\n**Outputs:**\n\n-   Dataframe with NA counts and percentages\n\n-   Dual plots (absolute counts and percentages)\n\n**Description:**\\\nProvides missing value analysis with numerical summary and visual\nrepresentation.\n\n```{r}\ncountNA <- function(df) {\n  require(tidyverse)\n  require(cowplot)\n  \n  # Count NAs using summarise across all columns\n  df_na_count <- df %>%\n    summarise(across(everything(), ~ sum(is.na(.)))) %>%\n    pivot_longer(cols = everything(), names_to = \"col\", values_to = \"NAs\") %>%\n    mutate(NA_perc = round(NAs / nrow(df) * 100, 2))\n  \n  print(df_na_count)\n  \n  # Absolute NA count plot\n  p1 <- df_na_count %>%\n    ggplot(aes(x = col, y = NAs, fill = col)) +\n    geom_col(show.legend = FALSE) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 90, face = \"bold\")) +\n    scale_fill_viridis_d(option = \"magma\") +\n    scale_x_discrete(labels = function(x) str_trunc(x, width = 10, ellipsis = \"...\")) +\n    geom_text(aes(label = NAs), vjust = 0)\n  \n  # Relative NA percentage plot\n  p2 <- df_na_count %>%\n    ggplot(aes(x = col, y = NA_perc, fill = col)) +\n    geom_col(show.legend = FALSE) +\n    scale_y_continuous(limits = c(0, 100)) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 90, face = \"bold\")) +\n    scale_fill_viridis_d(option = \"magma\") +\n    scale_x_discrete(labels = function(x) str_trunc(x, width = 12, ellipsis = \"...\")) +\n    geom_text(aes(label = paste0(NA_perc, \"%\")), vjust = 0)\n  \n  plot_grid(p1, p2, nrow = 2)\n}\n```\n\n### `checkTimeSpan(df)`\n\n**Purpose:**\n\nChecks distinct dates for each state and returns a bar plot showing the\nmaximum and minimum date, thereby allowing us to check states with\nuseful data.\n\n**Parameters:**\n\n-   `df`: Input dataframe with date column\n\n**Outputs:**\n\n-   Date range on a bar plot\n\n**Description:**\n\n-   returns a barplot showing the states with their maximum and minimum\n    dates. There is no conclusion to be made based on these plots,\n    however, I found Puerto Rico and United States as part of the states\n    on this plot. This will be filtered out later in the data cleaning\n    process.\n\n## 3. Visualization Functions\n\n### `plotConfirmedCasesTotal(data=df.main, region.group)`\n\n**Purpose:** Tracks pandemic progression based on region.\n\n**Parameters:**\n\n-   `data`: Main dataframe (default: `df.main`)\n\n-   `region.group`: Geographic region to analyze\n\n**Output:**\n\n-   2x2 panel plot with absolute/relative infection cases and deaths\n    over time on a state level.\n\n-   Auto-saves PNG to `./explore` directory and creates the ./explore\n    directory if it does not exist.\n\n**Description:**\n\nShows both absolute counts and population-adjusted percentages for\nCOVID-19 metrics across states for each `region.group`\n\n```{r}\n\nplotConfirmedCasesTotal <- function(data = df.main, region.group)\n{\n  \n  # data:\n  plot_data <- data %>% \n    filter(region_group == region.group)\n  \n  # confirmed cases absolute count\n  p11 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = confirmed_total,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Number of Confirmed cases total\") +\n    ggtitle(paste(\"Infected Cases /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p11)\n  \n  ## confirmed cases relative count:\n  p21 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = confirmed_totalPerc,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Percentage(%) of Confirmed cases total\") +\n    ggtitle(paste(\"Infected Cases /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p21)\n  \n  \n  # death cases absolute count\n  p12 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = deaths_total,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Number of Deaths total\") +\n    ggtitle(paste(\"Death /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p12)\n  \n  ## confirmed cases relative count:\n  p22 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = deaths_totalPerc,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Percentage(%) of Deaths total\") +\n    ggtitle(paste(\"Death /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p22)\n  \n  plot <- plot_grid(p11, p12, p21, p22, nrow = 2, ncol = 2)\n  \n  #plot_export\n  \n  if (!dir.exists(\"./explore\"))\n  {\n    dir.create(\"./explore\")\n  }\n  \n  ggsave(filename = paste(\"./explore/01_confirmed_cases_and_deaths\",\n                          region.group, \".png\"),\n         plot = plot,\n         width = 30, height = 20, \n         units = \"cm\",\n         dpi = 1200)\n  \n}\n\n```\n\n### `plot7DayAverage(data=df.main, region.group, output_dir=\"./explore\")`\n\n**Purpose:** Analyzes trend of Covid-19 infection cases and death trend\non a 7 day average for each region.\n\n**Parameters:**\n\n-   `data`: Main dataframe (default: `df.main`)\n\n-   `region.group`: Geographic region\n\n<!-- -->\n\n-   `output_dir`: directory to save plot (default: `./explore`)\n\n**Features:**\n\n-   Error checking for valid region groups\n\n-   Modular plot generation\n\n-   Standardized plot-saving format\n\n**Output:**\n\nDual time series plots of 7-day moving averages for infection cases and\ndeaths.\n\n```{r}\nplot7DayAverage <- function(data = df.main, region.group, output_dir = \"./explore\") \n  {\n  # Ensure necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Verify that region.group exists\n  if (!region.group %in% unique(data$region_group)) {\n    stop(\"Error: The specified region.group does not exist in the data.\")\n  }\n  \n  # Filter data\n  plot_data <- data %>% \n    filter(region_group == region.group)\n  \n  # Helper function for creating plots\n  create_plot <- function(data = plot.data, \n                          y_var, title_text, y_label_text) {\n    data %>%\n      ggplot(aes(x = date, y = {{ y_var }}, group = state, color = state)) +\n      geom_line(alpha = 0.8, linewidth = 0.8) +\n      geom_point(alpha = 0.8, size = 0.8, show.legend = FALSE) +\n      scale_colour_viridis_d() +\n      labs(title = paste(title_text, \"-\", region.group),\n           x = \"Date\",\n           y = y_label_text,\n           color = \"State\") +\n      theme_minimal() +\n      theme(plot.title = element_text(hjust = 0.5))\n  }\n  \n  # Create plots\n  p1 <- create_plot(plot_data, \n                    `confirmed_daily_cases 7d Avg`, \n                    \"Infected Daily Cases\", \n                    \"7-Day Moving Average of Confirmed Cases\")\n  p2 <- create_plot(plot_data, \n                    `death_daily_cases 7d Avg`, \n                    \"Deaths\", \n                    \"7-Day Moving Average of Deaths\")\n  \n  # Combine plots\n  combined_plot <- plot_grid(p1, p2, nrow = 2)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"03_confirmed_cases_and_deaths_on_7Day_Avg_\", region.group, \".png\"))\n  \n  # Save plot\n  ggsave(filename = filename,\n         plot = combined_plot,\n         width = 35, height = 25, units = \"cm\",\n         dpi = 1200)\n  \n  # Return the combined plot\n  return(combined_plot)\n}\n\n```\n\n### `plotCovid19Map_overTime(data=df.main, var, output_dir=\"./explore\")`\n\n**Purpose:** Show on map how number of COVID-case have changed over time\n(monthly)\n\n**Parameters:**\n\n-   `data`: Main dataframe\n\n-   `var`: Variable to visualize\n    (`confirmed_total/deaths_total/vaccine_doses_total`)\n\n-   `output_dir:` Save location for plots to `./explore` directory by\n    default and creates the directory if it does not exist.\n\n**Output:**\n\nFaceted chloropleth map showing variable `var` evolution across monthly\nsnapshots.\n\n```{r}\nplotCovid19Map_overTime <- function(data = df.main, var,\n                                    output_dir = \"./explore\") \n  {\n  \n  # Ensure the necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Filter and prepare data\n  plot_data <- data %>% \n    filter(date_snapshot_flag) %>% \n    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% \n    left_join(map_data(\"state\"), by = c(\"state_\" = \"region\"))\n  \n  # Helper function for creating plots\n  create_plot <- function(data, var, title_text) {\n    data %>%\n      ggplot(aes(x = long, y = lat, group = group)) +\n      geom_polygon(aes_string(fill = var), \n                   color = \"black\", show.legend = TRUE) +\n      facet_wrap(~ date) +\n      ggtitle(title_text) +\n      theme_bw() + \n      theme(axis.ticks = element_blank(),\n            axis.text = element_blank(),\n            plot.title = element_text(hjust = 0.5)) + \n      scale_fill_gradient(low = \"white\", high = \"red\")\n  }\n  \n  # Create plot based on variable\n  title <- paste(\"Map of Covid-19\", gsub(\"_\", \" \", var), \"Over Time\")\n  plot <- create_plot(plot_data, var, title)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"06_Map_of_\", var, \"_over_time.png\"))\n  \n  # Save plot\n  ggsave(filename = filename, plot = plot, width = 35,\n         height = 25, units = \"cm\", dpi = 1200)\n  \n  # Return the plot\n  return(plot)\n}\n\n\n```\n\n## 4 Advanced Analysis Function:\n\n### `plotCovid19Indicators_stateLevel(data=df.main, state_selection, output_dir=\"./explore\")`\n\n```{r}\n\nplotCovid19Map_overTime <- function(data = df.main, var,\n                                    output_dir = \"./explore\") \n  {\n  \n  # Ensure the necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Filter and prepare data\n  plot_data <- data %>% \n    filter(date_snapshot_flag) %>% \n    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% \n    left_join(map_data(\"state\"), by = c(\"state_\" = \"region\"))\n  \n  # Helper function for creating plots\n  create_plot <- function(data, var, title_text) {\n    data %>%\n      ggplot(aes(x = long, y = lat, group = group)) +\n      geom_polygon(aes_string(fill = var), \n                   color = \"black\", show.legend = TRUE) +\n      facet_wrap(~ date) +\n      ggtitle(title_text) +\n      theme_bw() + \n      theme(axis.ticks = element_blank(),\n            axis.text = element_blank(),\n            plot.title = element_text(hjust = 0.5)) + \n      scale_fill_gradient(low = \"white\", high = \"red\")\n  }\n  \n  # Create plot based on variable\n  title <- paste(\"Map of Covid-19\", gsub(\"_\", \" \", var), \"Over Time\")\n  plot <- create_plot(plot_data, var, title)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"06_Map_of_\", var, \"_over_time.png\"))\n  \n  # Save plot\n  ggsave(filename = filename, plot = plot, width = 35,\n         height = 25, units = \"cm\", dpi = 1200)\n  \n  # Return the plot\n  return(plot)\n}\n\n\n```\n\n**Purpose:**\n\nPlots Covid-19 Indicators (infection, deaths and government response) at\nthe state-level monthly (there is a date snapshot flag for every 30th\nday captured in the in the EDA section before this function is called).\n\n**Parameters:**\n\n-   `data`: Main dataframe (default: `df.main`)\n\n-   `state_selection`: Target state\n\n-   `output_dir`: Saves plot to location (`\"./explore\"` by default) and\n    creates the directory if it does not exist.\n\n**Outputs:**\n\n-    Stacked area chart: Cumulative totals\n\n-    Log-scale time series: 7-day averages\n\n-   Government response metrics\n\n**Description:** Plots and saves the stacked area chart in the\n`output_dir`.\n\n# Usage Notes\n\n-   File outputs are automatically saved to `./explore` directory.\n-   Date column must be present and properly formatted.\n-   Region groups must exist in dataframe's `region_group` column.\n-   String matching functions work best with clean text data.\n-   Map functions require `state_` column existing in the dataframe in\n    lowercase state names\n","srcMarkdownNoYaml":"\n\n# Custom EDA Functions Documentation\n\nThis page explains the purpose and usage of custom functions developed\nfor the COVID-19 exploratory data analysis performed in this project.\n\n# Dependencies\n\nAll functions require:\n\n-   tidyverse for data analysis\n\n-   cowplot for plot grid\n\n-   viridis for plot palette\n\n-   tidystringdist (for `matchStates` function)\n\n```{r}\n#| echo: false\nlibrary(tidyverse)\n```\n\n## 1. Data Preparation Functions\n\n### `renameState(df)`\n\n**Purpose:** Standardizes state column naming across datasets\n\n**Parameters:** `df`: Input dataframe\n\n**Description:**\\\nRenames any column containing \"state\" in its name to \"state\". Ensures\nconsistent column naming across different datasets.\n\n```{r}\nrenameState <- function(df) {\n  df %>% rename_with(~ \"state\", contains(\"state\"))\n}\n```\n\n### `matchStates(states_base=states_list, data, col_name)`\n\n**Purpose:**\n\n-   Also for data wrangling purpose, it fuzzy matches the U.S state\n    names to a `states_base` column as reference.\n\n-   The `states_base` used in my EDA is from the `datasets::state.name`.\n\n**Parameters:**\n\n-   `states_base`: Reference list of states (default: `states_list` in\n    the `datasets::state.name`)\n\n-   `data`: Dataset containing state names to match - `col_name` Name of\n    column containing state names in the `data` parameter.\n\n**Description:**\n\nUses Optimal String Alignment (OSA) distance to match state names\nbetween datasets and reference list. Helps resolve naming\ninconsistencies.\n\n```{r}\nmatchStates <- function(states_base = states_list,\n                        data,\n                        col_name)\n{\n  require(tidystringdist)\n  require(rlang)\n  \n  # extract unique state names from given data source.\n  states_data <- data %>% \n    distinct(state)\n  \n  # create table of all combinations: state pairs:\n  states_comb <- expand.grid(states_base = states_list %>% \n                               pull(state_base),\n                             state = states_data %>% pull(state))\n  \n  # compute string distance:\n  t1 <- tidy_stringdist(df = states_comb,\n                  v1 = states_base,\n                  v2 = state,\n                  method = \"osa\") %>% \n    # sort best name match per state and add matching rank:\n    arrange(states_base, osa) %>% \n    group_by(states_base) %>% \n    mutate(rank = row_number()) %>% \n    ungroup() %>% \n    # filter top ranks:\n    filter(rank == 1) %>% \n    select(states_base, {{ col_name }} := state)\n  \n  print(t1)\n  \n  \n  # t2 is an easier fix...\n  t2 <- tidy_stringdist(df = states_comb,\n                        v1 = states_base,\n                        v2 = state,\n                        method = \"osa\") %>% \n    filter(osa == 0) %>% \n    select(states_base, state) %>% \n    arrange(states_base)\n  \n  return (t1)\n  \n}\n\n```\n\n## 2. Data Inspection Functions\n\n### `countNA(df)`\n\n**Purpose:** Analyzes missing values patterns\n\n**Parameters:** `df`: Input dataframe\n\n**Outputs:**\n\n-   Dataframe with NA counts and percentages\n\n-   Dual plots (absolute counts and percentages)\n\n**Description:**\\\nProvides missing value analysis with numerical summary and visual\nrepresentation.\n\n```{r}\ncountNA <- function(df) {\n  require(tidyverse)\n  require(cowplot)\n  \n  # Count NAs using summarise across all columns\n  df_na_count <- df %>%\n    summarise(across(everything(), ~ sum(is.na(.)))) %>%\n    pivot_longer(cols = everything(), names_to = \"col\", values_to = \"NAs\") %>%\n    mutate(NA_perc = round(NAs / nrow(df) * 100, 2))\n  \n  print(df_na_count)\n  \n  # Absolute NA count plot\n  p1 <- df_na_count %>%\n    ggplot(aes(x = col, y = NAs, fill = col)) +\n    geom_col(show.legend = FALSE) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 90, face = \"bold\")) +\n    scale_fill_viridis_d(option = \"magma\") +\n    scale_x_discrete(labels = function(x) str_trunc(x, width = 10, ellipsis = \"...\")) +\n    geom_text(aes(label = NAs), vjust = 0)\n  \n  # Relative NA percentage plot\n  p2 <- df_na_count %>%\n    ggplot(aes(x = col, y = NA_perc, fill = col)) +\n    geom_col(show.legend = FALSE) +\n    scale_y_continuous(limits = c(0, 100)) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 90, face = \"bold\")) +\n    scale_fill_viridis_d(option = \"magma\") +\n    scale_x_discrete(labels = function(x) str_trunc(x, width = 12, ellipsis = \"...\")) +\n    geom_text(aes(label = paste0(NA_perc, \"%\")), vjust = 0)\n  \n  plot_grid(p1, p2, nrow = 2)\n}\n```\n\n### `checkTimeSpan(df)`\n\n**Purpose:**\n\nChecks distinct dates for each state and returns a bar plot showing the\nmaximum and minimum date, thereby allowing us to check states with\nuseful data.\n\n**Parameters:**\n\n-   `df`: Input dataframe with date column\n\n**Outputs:**\n\n-   Date range on a bar plot\n\n**Description:**\n\n-   returns a barplot showing the states with their maximum and minimum\n    dates. There is no conclusion to be made based on these plots,\n    however, I found Puerto Rico and United States as part of the states\n    on this plot. This will be filtered out later in the data cleaning\n    process.\n\n## 3. Visualization Functions\n\n### `plotConfirmedCasesTotal(data=df.main, region.group)`\n\n**Purpose:** Tracks pandemic progression based on region.\n\n**Parameters:**\n\n-   `data`: Main dataframe (default: `df.main`)\n\n-   `region.group`: Geographic region to analyze\n\n**Output:**\n\n-   2x2 panel plot with absolute/relative infection cases and deaths\n    over time on a state level.\n\n-   Auto-saves PNG to `./explore` directory and creates the ./explore\n    directory if it does not exist.\n\n**Description:**\n\nShows both absolute counts and population-adjusted percentages for\nCOVID-19 metrics across states for each `region.group`\n\n```{r}\n\nplotConfirmedCasesTotal <- function(data = df.main, region.group)\n{\n  \n  # data:\n  plot_data <- data %>% \n    filter(region_group == region.group)\n  \n  # confirmed cases absolute count\n  p11 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = confirmed_total,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Number of Confirmed cases total\") +\n    ggtitle(paste(\"Infected Cases /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p11)\n  \n  ## confirmed cases relative count:\n  p21 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = confirmed_totalPerc,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Percentage(%) of Confirmed cases total\") +\n    ggtitle(paste(\"Infected Cases /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p21)\n  \n  \n  # death cases absolute count\n  p12 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = deaths_total,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Number of Deaths total\") +\n    ggtitle(paste(\"Death /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p12)\n  \n  ## confirmed cases relative count:\n  p22 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = deaths_totalPerc,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Percentage(%) of Deaths total\") +\n    ggtitle(paste(\"Death /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p22)\n  \n  plot <- plot_grid(p11, p12, p21, p22, nrow = 2, ncol = 2)\n  \n  #plot_export\n  \n  if (!dir.exists(\"./explore\"))\n  {\n    dir.create(\"./explore\")\n  }\n  \n  ggsave(filename = paste(\"./explore/01_confirmed_cases_and_deaths\",\n                          region.group, \".png\"),\n         plot = plot,\n         width = 30, height = 20, \n         units = \"cm\",\n         dpi = 1200)\n  \n}\n\n```\n\n### `plot7DayAverage(data=df.main, region.group, output_dir=\"./explore\")`\n\n**Purpose:** Analyzes trend of Covid-19 infection cases and death trend\non a 7 day average for each region.\n\n**Parameters:**\n\n-   `data`: Main dataframe (default: `df.main`)\n\n-   `region.group`: Geographic region\n\n<!-- -->\n\n-   `output_dir`: directory to save plot (default: `./explore`)\n\n**Features:**\n\n-   Error checking for valid region groups\n\n-   Modular plot generation\n\n-   Standardized plot-saving format\n\n**Output:**\n\nDual time series plots of 7-day moving averages for infection cases and\ndeaths.\n\n```{r}\nplot7DayAverage <- function(data = df.main, region.group, output_dir = \"./explore\") \n  {\n  # Ensure necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Verify that region.group exists\n  if (!region.group %in% unique(data$region_group)) {\n    stop(\"Error: The specified region.group does not exist in the data.\")\n  }\n  \n  # Filter data\n  plot_data <- data %>% \n    filter(region_group == region.group)\n  \n  # Helper function for creating plots\n  create_plot <- function(data = plot.data, \n                          y_var, title_text, y_label_text) {\n    data %>%\n      ggplot(aes(x = date, y = {{ y_var }}, group = state, color = state)) +\n      geom_line(alpha = 0.8, linewidth = 0.8) +\n      geom_point(alpha = 0.8, size = 0.8, show.legend = FALSE) +\n      scale_colour_viridis_d() +\n      labs(title = paste(title_text, \"-\", region.group),\n           x = \"Date\",\n           y = y_label_text,\n           color = \"State\") +\n      theme_minimal() +\n      theme(plot.title = element_text(hjust = 0.5))\n  }\n  \n  # Create plots\n  p1 <- create_plot(plot_data, \n                    `confirmed_daily_cases 7d Avg`, \n                    \"Infected Daily Cases\", \n                    \"7-Day Moving Average of Confirmed Cases\")\n  p2 <- create_plot(plot_data, \n                    `death_daily_cases 7d Avg`, \n                    \"Deaths\", \n                    \"7-Day Moving Average of Deaths\")\n  \n  # Combine plots\n  combined_plot <- plot_grid(p1, p2, nrow = 2)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"03_confirmed_cases_and_deaths_on_7Day_Avg_\", region.group, \".png\"))\n  \n  # Save plot\n  ggsave(filename = filename,\n         plot = combined_plot,\n         width = 35, height = 25, units = \"cm\",\n         dpi = 1200)\n  \n  # Return the combined plot\n  return(combined_plot)\n}\n\n```\n\n### `plotCovid19Map_overTime(data=df.main, var, output_dir=\"./explore\")`\n\n**Purpose:** Show on map how number of COVID-case have changed over time\n(monthly)\n\n**Parameters:**\n\n-   `data`: Main dataframe\n\n-   `var`: Variable to visualize\n    (`confirmed_total/deaths_total/vaccine_doses_total`)\n\n-   `output_dir:` Save location for plots to `./explore` directory by\n    default and creates the directory if it does not exist.\n\n**Output:**\n\nFaceted chloropleth map showing variable `var` evolution across monthly\nsnapshots.\n\n```{r}\nplotCovid19Map_overTime <- function(data = df.main, var,\n                                    output_dir = \"./explore\") \n  {\n  \n  # Ensure the necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Filter and prepare data\n  plot_data <- data %>% \n    filter(date_snapshot_flag) %>% \n    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% \n    left_join(map_data(\"state\"), by = c(\"state_\" = \"region\"))\n  \n  # Helper function for creating plots\n  create_plot <- function(data, var, title_text) {\n    data %>%\n      ggplot(aes(x = long, y = lat, group = group)) +\n      geom_polygon(aes_string(fill = var), \n                   color = \"black\", show.legend = TRUE) +\n      facet_wrap(~ date) +\n      ggtitle(title_text) +\n      theme_bw() + \n      theme(axis.ticks = element_blank(),\n            axis.text = element_blank(),\n            plot.title = element_text(hjust = 0.5)) + \n      scale_fill_gradient(low = \"white\", high = \"red\")\n  }\n  \n  # Create plot based on variable\n  title <- paste(\"Map of Covid-19\", gsub(\"_\", \" \", var), \"Over Time\")\n  plot <- create_plot(plot_data, var, title)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"06_Map_of_\", var, \"_over_time.png\"))\n  \n  # Save plot\n  ggsave(filename = filename, plot = plot, width = 35,\n         height = 25, units = \"cm\", dpi = 1200)\n  \n  # Return the plot\n  return(plot)\n}\n\n\n```\n\n## 4 Advanced Analysis Function:\n\n### `plotCovid19Indicators_stateLevel(data=df.main, state_selection, output_dir=\"./explore\")`\n\n```{r}\n\nplotCovid19Map_overTime <- function(data = df.main, var,\n                                    output_dir = \"./explore\") \n  {\n  \n  # Ensure the necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Filter and prepare data\n  plot_data <- data %>% \n    filter(date_snapshot_flag) %>% \n    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% \n    left_join(map_data(\"state\"), by = c(\"state_\" = \"region\"))\n  \n  # Helper function for creating plots\n  create_plot <- function(data, var, title_text) {\n    data %>%\n      ggplot(aes(x = long, y = lat, group = group)) +\n      geom_polygon(aes_string(fill = var), \n                   color = \"black\", show.legend = TRUE) +\n      facet_wrap(~ date) +\n      ggtitle(title_text) +\n      theme_bw() + \n      theme(axis.ticks = element_blank(),\n            axis.text = element_blank(),\n            plot.title = element_text(hjust = 0.5)) + \n      scale_fill_gradient(low = \"white\", high = \"red\")\n  }\n  \n  # Create plot based on variable\n  title <- paste(\"Map of Covid-19\", gsub(\"_\", \" \", var), \"Over Time\")\n  plot <- create_plot(plot_data, var, title)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"06_Map_of_\", var, \"_over_time.png\"))\n  \n  # Save plot\n  ggsave(filename = filename, plot = plot, width = 35,\n         height = 25, units = \"cm\", dpi = 1200)\n  \n  # Return the plot\n  return(plot)\n}\n\n\n```\n\n**Purpose:**\n\nPlots Covid-19 Indicators (infection, deaths and government response) at\nthe state-level monthly (there is a date snapshot flag for every 30th\nday captured in the in the EDA section before this function is called).\n\n**Parameters:**\n\n-   `data`: Main dataframe (default: `df.main`)\n\n-   `state_selection`: Target state\n\n-   `output_dir`: Saves plot to location (`\"./explore\"` by default) and\n    creates the directory if it does not exist.\n\n**Outputs:**\n\n-    Stacked area chart: Cumulative totals\n\n-    Log-scale time series: 7-day averages\n\n-   Government response metrics\n\n**Description:** Plots and saves the stacked area chart in the\n`output_dir`.\n\n# Usage Notes\n\n-   File outputs are automatically saved to `./explore` directory.\n-   Date column must be present and properly formatted.\n-   Region groups must exist in dataframe's `region_group` column.\n-   String matching functions work best with clean text data.\n-   Map functions require `state_` column existing in the dataframe in\n    lowercase state names\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"funcs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":{"light":"flatly","dark":"darkly"},"title":"Custom Functions","date":"2025-02-11","editor":{"markdown":{"wrap":72}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}