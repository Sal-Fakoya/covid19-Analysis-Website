{"title":"EDA Process","markdown":{"yaml":{"title":"EDA Process","date":"2025-02-11","toc":true,"editor":{"markdown":{"wrap":72}},"execute":{"warning":false,"freeze":"auto","results":"hide","fig.show":"hide"}},"headingText":"Data Cleaning Pipeline","containsRefs":false,"markdown":"\n\n\nThis page is a continuation of the previous section and outlines the EDA\nprocess performed for this COVID-19 analysis in the United States. In\nthis section, we'll create new columns for the 7 day moving average for\neach numerical table from `df.main`. Using a 7 day moving average helps\nsmooth out the jumps we will have in the plots without the moving\ninstance. There will be a varietry of plots I created here before\ngetting there, and I will expand more on that in the sections below.\n\n## 1. Initial Setup\n\n```{r}\n#| include: true\n# Environment cleanup and package loading\nrm(list = ls())\ngraphics.off()\n\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(cowplot)\nlibrary(rio)\nlibrary(janitor)\nlibrary(tidystringdist)\nlibrary(zoo)\n\n# after downloading the funcs.R file, uncomment the code below before running it.\nsource(\"./funcs.R\")\n\ndir = \"./exported-data\"\n\nif (!dir.exists(dir))\n{\n  dir.create(dir)\n}\n\ndf_covid19 <- read_csv(file =\n                         paste0(dir, \"/\", \"df-covid19.csv\"))\n\ndf_covid19_response <- read_csv(file =\n                                  paste0(dir, \"/\", \"df-covid19-response.csv\"))\ndf_gdp <- read_csv(file = paste0(dir, \"/\", \"df-gdp.csv\"))\ndf_pop <- read_csv(file = paste0(dir, \"/\", \"df-pop.csv\"))\ndf_vaccine <- read_csv(file = paste0(dir, \"/\", \"df-vaccine.csv\"))\n\n```\n\n## A few graphs before getting serious...\n\nI made a few plots here just to kind of get a rough view of what the\ndata across each state by region and on the state-level. I wanted to get\na feel for the total number of infections and deaths and to see the\nrecords in a map. This steps don't essentially finalize anything. I just\nwanted a rough view on one or a few states before and while answering\nreal questions.\n\n\n### Missing Value Handling\n\nNext, we can check for missing values across all datasets:\n\n```{r}\n\n# Check missing values per column in all datasets\ndf_list <- list(\n  df_covid19 = df_covid19, \n  df_gdp = df_gdp,\n  df_pop = df_pop,\n  df_covid19_response = df_covid19_response,\n  df_vaccine = df_vaccine\n)\n\nlapply(df_list, countNA)  # Custom function to count NAs\n\n```\n\n**Key findings:** + Vaccination data contained 14,050 missing entries\nhandled via imputation + COVID-19 recovery/active cases showed\ninconsistent reporting patterns + All other datasets had complete key\nvariables\n\n### Check for Time-Span consistency of data recorded\n\nWe can do this using `checkTimeSpan` custom function from previous page.\n\n```{r}\n\n# check time span for each data frame:\ncheckTimeSpan(df_covid19) # Puerto Rico is not a state\ncheckTimeSpan(df_covid19_response)\ncheckTimeSpan(df_vaccine)\n\n\n```\n\n### State Name Standardization- String Matching\n\nEnsured consistent state naming across datasets using fuzzy string\nmatching:\n\n```{r}\n#| fig.show: 'hide'\n## national level:\nplot <- df_covid19 %>% \n  select(state, date, confirmed:active) %>% \n  # convert from long to wide:\n  pivot_longer(data =.,\n               cols = c(\"confirmed\", \"deaths\", \"recovered\", \"active\"),\n               names_to = \"variable\",\n               values_to = \"values\") %>% \n  # aggregate on a date and variable level:\n  group_by(date, variable) %>% \n  reframe(values = sum(values, na.rm = T)) %>% \n  #plot:\n  ggplot(mapping = aes(x = date, \n                       y = values, \n                       color = variable)) +\n  geom_point(alpha = 0.7) +\n  facet_grid(variable ~. , scales = \"free\")\n\n# Observation from total number of cases on state and national level: All data regarding covid-19 infections are reported as running total.\"confirmed\" and \"deaths\"  cases seem to be reported consistently, however, there are missing data and in some parts a drop of reported data in \"recovered\" and \"active\" cases.\n\n\n\n# Step 1: Get a list of us state names:\nstates_list <- tibble(state_base = datasets::state.name)\n\n## do state names matching with function in funcs.R\nstates_list_covid19 <- matchStates(data = df_covid19, \n                                   col_name = \"state_covid19\")\nstates_list_gdp <- matchStates(data = df_covid19,\n                                   col_name = \"state_gdp\")\nstates_list_pop <- matchStates(data = df_covid19,\n                                   col_name = \"state_pop\")\nstates_list_covid19_response <- matchStates(data = df_covid19,\n                                            col_name =\n                                          \"state_covid19_response\")\nstates_list_vaccine <- matchStates(data = df_covid19,\n                                   col_name = \"state_vaccine\")\n\n\n\n# Create a universal list by joining the lists:\nstates_list <- states_list_covid19 %>% \n  inner_join(x = .,\n             y = states_list_gdp,\n             by = \"states_base\") %>% \n  inner_join(x = .,\n             y = states_list_pop,\n             by = \"states_base\") %>% \n  inner_join(x = .,\n             y = states_list_covid19_response,\n             by = \"states_base\") %>% \n  inner_join(x = .,\n             y = states_list_vaccine,\n             by = \"states_base\") %>% \n  arrange(states_base) %>% \n  mutate(state_id = row_number()) %>% \n  select(state_id, everything())\n\n\n# easier fix::\ndf_states_list <- list(\n  states_list_covid19 = states_list_covid19,\n  states_list_covid19_response = states_list_covid19_response,\n  states_list_gdp = states_list_gdp,\n  states_list_pop = states_list_pop,\n  states_list_vaccine = states_list_vaccine)\n\nstates_list <- reduce(.x = df_states_list, \n                      .f = inner_join,\n                      by = \"states_base\") %>% \n  arrange(states_base) %>% \n  mutate(state_id = row_number()) %>% \n  select(state_id, everything())\n\n\n# All states are properly matched\n\n# Next, add state region\nstates_region <- tibble(states_base = state.name,\n                        region = state.region)\n\n\n## create states table: \ndf_states <- states_list %>% \n  left_join(x = .,\n            y = states_region,\n            by = \"states_base\")\n\n```\n\n\n**Result:**\n\n-    Created master state list with standardized names and IDs\n\n-    Removed non-state territories (e.g., Puerto Rico)\n\n### Main Table Creation\n\n```{r}\n\n## Get relevant dates:\ndf_dates <- tibble(date = seq.Date(from = df_covid19 %>% \n                                     pull(date) %>% \n                                     min(.),\n                                   to = df_covid19 %>% \n                                     pull(date) %>% max(.),\n                                   by = \"1 day\"))\n\n## Create Main table:\ndf_main <- df_states %>% \n  # cross join:\n  cross_join(x = .,\n            y = df_dates)\n\n\n## cehck:\ncount_states_base <- df_main %>% \n  count(states_base) %>% as.data.frame()\n\ndf_main <- df_main %>%\n  mutate(across(states_base:state_vaccine, str_trim))\n\ndf_covid19 <- df_covid19 %>%\n  mutate(state = str_trim(state))\n\ndf_gdp <- df_gdp %>%\n  mutate(state = str_trim(state))\n\ndf_pop <- df_pop %>%\n  mutate(state = str_trim(state))\n\ndf_covid19_response <- df_covid19_response %>%\n  mutate(state = str_trim(state))\n\ndf_vaccine <- df_vaccine %>%\n  mutate(state = str_trim(state))\n\ndf_joined <- df_main %>% \n  left_join(x = .,\n            y = df_covid19 %>% select(state, date, \n                                      confirmed, deaths),\n            by = c(\"state_covid19\" = \"state\",\n                   \"date\" = \"date\")) %>% \n  left_join(x = .,\n            y = df_gdp,\n            by = c(\"state_gdp\" = \"state\")) %>% \n  left_join(x = .,\n            y = df_pop,\n            by = c(\"state_pop\" = \"state\")) %>% \n  left_join(x = .,\n            y = df_vaccine,\n            by = c(\"state_vaccine\" = \"state\",\n                   \"date\" = \"date\")) %>% \n  left_join(x = .,\n            y = df_covid19_response,\n            by = c(\"state_covid19_response\" = \"state\",\n                   \"date\" = \"date\")) %>% \n  # remove redundant columns:\n  select(-c(\"state_covid19\", \"state_gdp\", \n            \"state_vaccine\", \"state_vaccine\", \"state_pop\")) %>% \n  # re-arrange:\n  select(state_id,\n         state = states_base,\n         region,\n         date,\n         confirmed_total = confirmed,\n         deaths_total = deaths,\n         daily_vacc_doses = vaccinations,\n         population = pop,\n         everything()) %>% \n  arrange(state, date)\n\n\n\ndf.main <- df_joined\n\n\n```\n\n**Result:**\n\n-    Creates a sequence of dates from minimum to maximum date sequence.\n\n-   Creates the main table using a cross join on the states list and the\n    date sequence created.\n\n-   I removed the leading and trailing white spaces in the state names\n    for the 5 primary datasets.\n\n    -   \\- I had a wrong result merging without doing this step.\n\n    -   How come? I found that some records were overlooked and not\n        properly match which was quite odd because I thought R\n        automatically trims white spaces in character vectors when you\n        import the data.\n\n    -   My solution: I took the preventative step of removing the\n        white-spaces.\n\n    -   I realized it was important to remove the trailing white spaces\n        to preveent wrong merging results in textual data.\n\n-    Merges the 5 thoroughly cleaned data-sets to the `df.main` (main)\n    table that will be used for data analysis.\n\n#### Replace Missing Values and Negative Records with Zero\n\n```{r}\n\n## check for missing data for non-vaccination data:\nmissing_conf_total <- df.main %>% \n  filter(is.na(confirmed_total)) %>%  # to check for missing values\n  nrow()  # count the number of rows for missing values\n\nmissing_deaths_total <- df.main %>% \n  filter(is.na(deaths_total)) %>%  # to check for missing values\n  nrow() \n\n# Get vaccination starting date:\nstarted_date_vacc <- df.main %>% \n  filter(is.na(daily_vacc_doses)) %>% nrow()\n# There are 14050 missing data for vaccination doses.\n\n\n# Get the minimum date for non-missing values of vaccination doses\ndf_state_vaccDatesMin <- df.main %>% \n  filter(!is.na(daily_vacc_doses)) %>% \n  group_by(state) %>% \n  reframe(min_date = min(date)) %>% \n  summarise(min_date = min(min_date))\n\n\n## replace NAs, calculate daily counts and total counts\ndf.main <- df.main %>% \n  mutate(population_in_mil = round(population / 10e6, 2),\n         daily_vacc_doses = replace_na(daily_vacc_doses, \n                                       replace = 0)) %>%\n  # get daily count:\n  group_by(state) %>% \n  mutate(confirmed_daily_cases = \n           confirmed_total - lag(confirmed_total, n = 1),\n         death_daily_cases = \n             deaths_total - lag(deaths_total, n = 1)) %>% \n  mutate(vaccine_doses_total = cumsum(daily_vacc_doses)) %>% \n  ungroup() %>% \n  select(state_id:date,\n         confirmed_total, confirmed_daily_cases,\n         deaths_total, death_daily_cases,\n         vaccine_doses_total, daily_vacc_doses,\n         everything())\n\n\n## check for negative values and replace them with zero, because some data were not reported:\ndf.main <- df.main %>% \n  mutate_at(.tbl = .,\n            .vars = c(\"confirmed_daily_cases\", \n                      \"death_daily_cases\", \"vaccine_doses_total\"),\n            .funs = function(.vars) {ifelse(.vars < 0, 0, .vars)}) \n\n\n```\n\n**Result:**\n\n-   Since I used left-join, I expected some Missing Values on the merged\n    records.\n\n-   Perhaps I should have used inner join, however, I wanted to account\n    for days where the states failed to record the cases, thereby\n    catching the inconsistencies and noting them in the EDA.\n\n-   Because we replaced missing records with 0, I suspected performing a\n    lag for `confirmed_total`, `deaths_total` and `vaccine_doses_total`,\n    would cause some negative values which means there was a drop in the\n    report from the states.\n\n-   I replaced these negative values with 0 since you cannot quantify\n    that you had negative number of reported cases. This doesn't really\n    make sense to others unless you're being mathematical.\n\n\n\n### Check the total number of infections and deaths by region:\n\n```{r}\n\n\n## Get total number of infections and deaths:\n# - states per region\ndf.main %>% \n  group_by(region) %>% \n  reframe(states = n_distinct(state),\n          total_death = sum(deaths_total),\n          confirmed_total = sum(confirmed_total))\n\n\n## show states on map:\nmax_date <- df.main %>% pull(date) %>% max(.)\n\n## states to lower case:\ndf.main <- df.main %>% \n  mutate(state_ = str_to_lower(string = state))\n\n\ndf.main %>% \n  filter(date == max_date) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = group)) +\n  geom_polygon(aes(fill = region),\n               color = \"black\") +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank())\n\n```\n\n**Results:**\n\n-   Here, I wanted to get a rough feel for the total number of\n    infections and deaths by region and I used a map to see that.\n\n## Question 1: How does total number of confirmed cases and COVID-19 related deaths change over time? - on a regional level - on a national level - on a state level:\n\nHere, we want to look at the total number of confirmed cases as they\nchange over time.\n\n```{r}\n## Get relative counts:\ndf.main <- df.main %>% \n  mutate(confirmed_totalPerc = confirmed_total / population,\n          deaths_totalPerc = deaths_total / population)\n  \n\n ## add region groups:\ndf_regionGroup <- df.main %>% \n  group_by(region) %>% \n  count(state) %>% \n  ungroup() %>% \n  arrange(region, state) %>% \n  # add state count:\n  group_by(region) %>% \n  mutate(states = n(),\n         id = row_number()) %>% \n  ungroup() %>% \n  # add group id:\n  mutate(group = case_when(id <= round(states / 2, 0) ~ 1, \n                           T ~ 2)) %>% \n  mutate(region_group = paste(region, \"- group\", group, sep = \" \")) %>% \n  select(state, region_group)\n\n\n\n## bring groups to main table:\ndf.main <- df.main %>%\n  left_join(x = .,\n            y = df_regionGroup,\n            by = \"state\")\n\n## Plot:\nregion_group <- df_regionGroup %>% \n  distinct(region_group) %>% \n  pull(region_group)\n\n#plotConfirmedCasesTotal(region.group = \"Northeast - group 1\")  \n\nplot <- map(.x = region_group, .f = ~plotConfirmedCasesTotal(region.group = .x))\n\nprint(plot)\n\n```\n\n**Features and Outputs:**\n\n-   I created new columns for relative counts in percentage by dividing\n    the infection and deaths total by the population.\n\n-   I added a region group column for each region, so I can properly\n    categorize by each region. It felt easier for me this way.\n\n-   Then I created a plot for each region's group to track the\n    pandemic's progression for each region.\n\n## Question 2: Which US state had the highest percentage of confirmed cases and deaths (relative count)?\n\n```{r}\n\n## bar chart:\nplot <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, state, confirmed_totalPerc, deaths_totalPerc) %>% \n  rename(`confirmed total %` = confirmed_totalPerc, \n         `death total %` = deaths_totalPerc) %>% \n  # convert from wide to long:\n  pivot_longer(cols = c(`confirmed total %`, `death total %`),\n               names_to = \"percentage\",\n               values_to = \"values\") %>% \n  group_by(state) %>% \n  mutate(total_perc = sum(values)) %>% \n  ungroup() %>% \n  arrange(total_perc, state) %>% \n  mutate(state = as.factor(state)) %>% \n  mutate(state = fct_inorder(state)) %>% \n  ggplot(mapping = aes(x = values,\n                       y = state,\n                       fill = region)) +\n  geom_col(color = \"black\") +\n  facet_wrap(percentage ~ .,\n             scales = \"free\") + \n  xlab(\"Percentage of State Population\") +\n  ylab(\"State\") +\n  ggtitle(\"Barplot of Confirmed Cases and Deaths for Each State\") +\n  scale_fill_viridis_d() +\n  theme_minimal()\n\ndir = \"./explore\"\nif (!dir.exists(dir))\n{\n    dir.create(dir)\n}\n\n# export plot:\nggsave(filename = \n         \"./explore/02_Barplot_of_Confirmed_Cases_and_Deaths_Per_State.png\",\n       plot = plot,\n       width = 30,\n       height = 25,\n       units = \"cm\")\n\n\n\ndf_samp <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, region_group, state, state_, confirmed_totalPerc, deaths_totalPerc) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  rename(`confirmed total %` = confirmed_totalPerc, \n         `death total %` = deaths_totalPerc) %>% \n  pivot_longer(cols = c(`confirmed total %`, `death total %`),\n               names_to = \"percentage\",\n               values_to = \"values\") %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = state)) +\n  geom_polygon(aes(fill = values),\n               color = \"black\",\n               show.legend = T) +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank()) + \n  scale_fill_viridis_c(option = \"inferno\")\n\n\n## Create a map regarding relative counts:\ndf.main <- df.main %>% \n  rename(`confirmed total %` = confirmed_totalPerc, \n         `death total %` = deaths_totalPerc)\n\n\np2 <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, state_, state, `confirmed total %`, `death total %`) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = state)) +\n  geom_polygon(aes(fill = `confirmed total %`),\n               color = \"black\",\n               show.legend = T) +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"Percentage of Confirmed Cases for Each State Population\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank()) + \n  scale_fill_viridis_c(option = \"inferno\")\n\n\np1 <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, state_, state, `confirmed total %`, `death total %`) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = state)) +\n  geom_polygon(aes(fill = `death total %`),\n               color = \"black\",\n               show.legend = T) +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"Percentage of Death Cases for Each State Population\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank()) + \n  scale_fill_gradient(low = \"white\", high = \"black\")\n\nplot <- plot_grid(p1, p2, nrow = 2)\nprint(plot)\n\n# export plot:\nggsave(filename = \n         \"./explore/02_Map_of_Confirmed_Cases_and_Deaths_Per_State.png\",\n       plot = plot,\n       width = 30,\n       height = 25,\n       units = \"cm\")\n\n```\n\n**Results:**\n\n-   Bar charts are created here for relative counts in percentage of\n    death cases and infection for each state population.\n\n-   Maps are also created to see the percentage across all states using\n    a continuous scale for the color.\n\n-   Plots are then saved to `./explore` directory.\n\n## Question 3: Daily Pandemic Dynamics: How do daily confirmed cases and deaths change over time?\n\nHere, we want to look at how daily confirmed cases and deaths change\nover time. Essentially, we'll be performed a time series. The plot in\nthe code block below will have jumps that we will smoothen out in the\nsecond code block. The first is kind of to see for ourselves the jags,\nwhich will help us realize the *need* for a moving average!\n\n```{r}\n\nplot <- df.main %>% \n  group_by(state, date) %>% \n  arrange(state, date) %>% \n  mutate_at(.tbl = .,\n            .vars = c(\"confirmed_daily_cases\", \"death_daily_cases\"),\n            .funs = function(x){ifelse(is.na(x), 0, x)}) %>% \n  pivot_longer(data = .,\n               cols = c(\"confirmed_daily_cases\", \"death_daily_cases\"),\n               names_to = \"daily_cases\",\n               values_to = \"values\") %>% \n  ggplot(mapping = aes(x = date,\n                       y = values,\n                       color = daily_cases)) +\n  geom_line(show.legend = F) + \n  facet_wrap(region ~ ., scales = \"free\")\n\nprint(plot)\n\n```\n\n**Results:**\n\n-   Here, you will see that our first time series have jumps since\n    missing values and negative were replaced with zeros earlier in the\n    data cleaning because there were inconsistencies in the reporting of\n    data by states.\n\n-   Instead, we use a moving average to smooth out these jumps.\n\n```{r}\nlibrary(zoo)\n\ndf.main <- df.main %>% \n  group_by(state, date) %>% \n  arrange(state, date) %>% \n  mutate_at(.tbl = .,\n            .vars = c(\"confirmed_daily_cases\", \"death_daily_cases\"),\n            .funs = function(x){ifelse(is.na(x), 0, x)})\n\n\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  group_by(state) %>% \n  mutate( across( .cols = c(confirmed_daily_cases, death_daily_cases),\n                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, \n                              align = \"right\", na.rm = TRUE),\n      .names = \"{.col} 7d Avg\")) %>% \n  ungroup()\n\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  group_by(state) %>% \n  mutate( across( .cols = c(confirmed_daily_cases, death_daily_cases),\n                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, \n                              align = \"right\", na.rm = TRUE),\n      .names = \"{.col} 7d Avg\")) %>% \n  ungroup()\n\n# data validation \nvalidate_dailyCases <- df.main %>% \n  filter(is.na(`confirmed_daily_cases 7d Avg`)) %>% \n  select(`confirmed_daily_cases 7d Avg`) %>% \n  nrow()\n\nvalidate_deaths <- df.main %>% \n  filter(is.na(`death_daily_cases 7d Avg`)) %>% \n  select(`death_daily_cases 7d Avg`) %>% \n  nrow()\n\n\n# Plot for each region:\nplot1 <- df.main %>% \n  pivot_longer(data = .,\n               cols =\n                 c(`confirmed_daily_cases 7d Avg`, `death_daily_cases 7d Avg`),\n               names_to = \"daily_cases\",\n               values_to = \"values\") %>% \n  ggplot(mapping = aes(x = date,\n                       y = values,\n                       color = daily_cases)) +\n  geom_line(show.legend = F, alpha = 0.7) + \n  scale_fill_viridis_d() +\n  facet_wrap(region ~ ., scales = \"free\")\n\nprint(plot1)\n\n# Plot:\nplot <- map(.x = region_group, \n    .f = ~ plot7DayAverage(region.group = .x))\n\nprint(plot)\n```\n\n**Features:**\n\n-   We added a 7 day moving average columns for the\n    `confirmed_daily_cases` and `death_daily_cases` to the `df.main`\n\n-   The plot returned from the code block should show the smoothed time\n    series for the pandemic dynamics.\n\n## Question 4: Is there a connection between state wealth, state population, confirmed cases and deaths?\n\nI'll reframe a bit: Do state wealth and/or state population have an\neffect on total percentage of confirmed cases and deaths?\n\nThough we cannot say it DOES, but plotting the scatterplot will show if\nthere is some kind of relationship that we can notice ourselves.\n\n```{r}\n\nplot <- df.main %>% \n  filter(date == max_date) %>% \n  ggplot(aes(x = `confirmed total %`,\n             y = `death total %`,\n             size = population_in_mil,\n             color = gdp_per_capita)) +\n  geom_point(alpha = 0.75,\n             show.legend = T) +\n  facet_wrap(. ~ region, scales = \"free\") +\n  scale_color_gradient(low=\"brown1\", high=\"green\") +\n  scale_size_area(max_size = 30) +\n  theme_minimal() +\n  xlab(\"Total Confirmed Cases %\") +\n  ylab(\"Total Deaths %\") +\n  ggtitle(\"Total Confirmed Cases and Total Deaths % VS GDP and population\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nfilename <- file.path(paste0(\"./explore/04_total_confirmed_deaths_perc_gdp_pop_and_scatter.png\"))\n\n# Save plot\nggsave(filename = filename,\n       plot = plot,\n       width = 35, height = 25, units = \"cm\",\n       dpi = 1200)\n\nprint(plot)\n\n```\n\n**Features:**\n\n-   We plot scatter-plots to try to visualize the relationship.\n\n-   These plots are saved in the `./explore` directory as well.\n\n## Question 5: Does vaccination help fighting the COVID-19 pandemic? i.e does vaccination help decrease covid-19 confirmed cases and death toll?\n\n```{r}\nplot <- map(.x = region_group,\n    .f = ~ plot_vaccineDosesTotal_7DayAVg(region.group = .x))\nprint(plot)\n\n```\n\n**Features:**\n\n-   Here, we plot the moving averages of the cummulative sum of vaccine\n    doses already calculated from before to see the trend of the does,\n    confirmed cases and death toll.\n\n## Question 6: Can you see the effect of government response against COVID-19 pandemic?\n\nHere we show on map how number of COVID-case have changed over time\n(monthly).\n\n```{r}\n\n# add date id and snapshot flag\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  # date id per state:\n  group_by(state) %>% \n  mutate(date_id = row_number()) %>% \n  ungroup() %>% \n  # add date snapshot flag for every 30th day:\n  mutate(date_snapshot_flag = case_when(date_id == 1 ~ TRUE,\n                                       date_id == max_date ~ TRUE,\n                                       date_id %% 30 == 0 ~ TRUE,\n                                       TRUE ~ FALSE))\n\n# plot the maps:\nvariables <- c(\"confirmed_total\", \"deaths_total\", \"vaccine_doses_total\")\n\nplots <- map(variables, ~ plotCovid19Map_overTime(df.main, .x))\n\n\nprint(plots)\n\n```\n\n**Features:**\n\n-   A new columns for the date flag for every 30th day (month) is\n    created.\n\n-   Stacked area charts of covid 19 indicators in a log-scale time\n    series are shown, as well as the government response metrics.\n\n## Question 7: How High was the response rate of each state towards pandemic?\n\nWe sort by state, date then the stringency index, grouping by state and\nseeing the stacked area charts of the stringency index for display.\n\n```{r}\nwStringencyIndex <- df.main %>% \n  arrange(state, date, stringency_index_for_display) %>% \n  # date id per state:\n  group_by(state) %>% \n  mutate(date_id = row_number()) %>% \n  ungroup() %>% \n  # add date snapshot flag for every 30th day:\n  mutate(date_snapshot_flag = case_when(date_id == 1 ~ TRUE,\n                                        date_id == max_date ~ TRUE,\n                                        date_id %% 30 == 0 ~ TRUE,\n                                        TRUE ~ FALSE))\n\nplots <- map(\"stringency_index_for_display\",\n             ~ plotCovid19Map_overTime(df.main, .x))\n\n\nprint(plots)\n```\n\n## Question 7: How each state is doing on a state level: How selected states are coping with the pandemic over time?\n\nHere we look at the vaccine smoothed daily counts by creating first the\n7 day moving average column and plotting for some states here:\nCalifornia, Texas, New York are used as examples.\n\n```{r}\n## vaccine smoothed daily counts:\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  group_by(state) %>% \n  mutate(across( .cols = daily_vacc_doses,\n                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, \n                              align = \"right\", na.rm = TRUE),\n                 .names = \"{.col} 7d Avg\")) %>% \n  ungroup()\n\n\n\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"California\")\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"New York\")\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"Texas\")\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"Nebraska\")\n\n\n\n\n\n```\n\n# Export Data\n\nI exported the data cleaned, merged and with the newly created columns\nin this EDA, if you would like to perform more analysis. You should be\nable to see it in my github repo as `df-main.csv` file.\n\n```{r}\nwrite_csv(x = df.main, file = \"df-main.csv\")\n```\n","srcMarkdownNoYaml":"\n\n# Data Cleaning Pipeline\n\nThis page is a continuation of the previous section and outlines the EDA\nprocess performed for this COVID-19 analysis in the United States. In\nthis section, we'll create new columns for the 7 day moving average for\neach numerical table from `df.main`. Using a 7 day moving average helps\nsmooth out the jumps we will have in the plots without the moving\ninstance. There will be a varietry of plots I created here before\ngetting there, and I will expand more on that in the sections below.\n\n## 1. Initial Setup\n\n```{r}\n#| include: true\n# Environment cleanup and package loading\nrm(list = ls())\ngraphics.off()\n\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(cowplot)\nlibrary(rio)\nlibrary(janitor)\nlibrary(tidystringdist)\nlibrary(zoo)\n\n# after downloading the funcs.R file, uncomment the code below before running it.\nsource(\"./funcs.R\")\n\ndir = \"./exported-data\"\n\nif (!dir.exists(dir))\n{\n  dir.create(dir)\n}\n\ndf_covid19 <- read_csv(file =\n                         paste0(dir, \"/\", \"df-covid19.csv\"))\n\ndf_covid19_response <- read_csv(file =\n                                  paste0(dir, \"/\", \"df-covid19-response.csv\"))\ndf_gdp <- read_csv(file = paste0(dir, \"/\", \"df-gdp.csv\"))\ndf_pop <- read_csv(file = paste0(dir, \"/\", \"df-pop.csv\"))\ndf_vaccine <- read_csv(file = paste0(dir, \"/\", \"df-vaccine.csv\"))\n\n```\n\n## A few graphs before getting serious...\n\nI made a few plots here just to kind of get a rough view of what the\ndata across each state by region and on the state-level. I wanted to get\na feel for the total number of infections and deaths and to see the\nrecords in a map. This steps don't essentially finalize anything. I just\nwanted a rough view on one or a few states before and while answering\nreal questions.\n\n\n### Missing Value Handling\n\nNext, we can check for missing values across all datasets:\n\n```{r}\n\n# Check missing values per column in all datasets\ndf_list <- list(\n  df_covid19 = df_covid19, \n  df_gdp = df_gdp,\n  df_pop = df_pop,\n  df_covid19_response = df_covid19_response,\n  df_vaccine = df_vaccine\n)\n\nlapply(df_list, countNA)  # Custom function to count NAs\n\n```\n\n**Key findings:** + Vaccination data contained 14,050 missing entries\nhandled via imputation + COVID-19 recovery/active cases showed\ninconsistent reporting patterns + All other datasets had complete key\nvariables\n\n### Check for Time-Span consistency of data recorded\n\nWe can do this using `checkTimeSpan` custom function from previous page.\n\n```{r}\n\n# check time span for each data frame:\ncheckTimeSpan(df_covid19) # Puerto Rico is not a state\ncheckTimeSpan(df_covid19_response)\ncheckTimeSpan(df_vaccine)\n\n\n```\n\n### State Name Standardization- String Matching\n\nEnsured consistent state naming across datasets using fuzzy string\nmatching:\n\n```{r}\n#| fig.show: 'hide'\n## national level:\nplot <- df_covid19 %>% \n  select(state, date, confirmed:active) %>% \n  # convert from long to wide:\n  pivot_longer(data =.,\n               cols = c(\"confirmed\", \"deaths\", \"recovered\", \"active\"),\n               names_to = \"variable\",\n               values_to = \"values\") %>% \n  # aggregate on a date and variable level:\n  group_by(date, variable) %>% \n  reframe(values = sum(values, na.rm = T)) %>% \n  #plot:\n  ggplot(mapping = aes(x = date, \n                       y = values, \n                       color = variable)) +\n  geom_point(alpha = 0.7) +\n  facet_grid(variable ~. , scales = \"free\")\n\n# Observation from total number of cases on state and national level: All data regarding covid-19 infections are reported as running total.\"confirmed\" and \"deaths\"  cases seem to be reported consistently, however, there are missing data and in some parts a drop of reported data in \"recovered\" and \"active\" cases.\n\n\n\n# Step 1: Get a list of us state names:\nstates_list <- tibble(state_base = datasets::state.name)\n\n## do state names matching with function in funcs.R\nstates_list_covid19 <- matchStates(data = df_covid19, \n                                   col_name = \"state_covid19\")\nstates_list_gdp <- matchStates(data = df_covid19,\n                                   col_name = \"state_gdp\")\nstates_list_pop <- matchStates(data = df_covid19,\n                                   col_name = \"state_pop\")\nstates_list_covid19_response <- matchStates(data = df_covid19,\n                                            col_name =\n                                          \"state_covid19_response\")\nstates_list_vaccine <- matchStates(data = df_covid19,\n                                   col_name = \"state_vaccine\")\n\n\n\n# Create a universal list by joining the lists:\nstates_list <- states_list_covid19 %>% \n  inner_join(x = .,\n             y = states_list_gdp,\n             by = \"states_base\") %>% \n  inner_join(x = .,\n             y = states_list_pop,\n             by = \"states_base\") %>% \n  inner_join(x = .,\n             y = states_list_covid19_response,\n             by = \"states_base\") %>% \n  inner_join(x = .,\n             y = states_list_vaccine,\n             by = \"states_base\") %>% \n  arrange(states_base) %>% \n  mutate(state_id = row_number()) %>% \n  select(state_id, everything())\n\n\n# easier fix::\ndf_states_list <- list(\n  states_list_covid19 = states_list_covid19,\n  states_list_covid19_response = states_list_covid19_response,\n  states_list_gdp = states_list_gdp,\n  states_list_pop = states_list_pop,\n  states_list_vaccine = states_list_vaccine)\n\nstates_list <- reduce(.x = df_states_list, \n                      .f = inner_join,\n                      by = \"states_base\") %>% \n  arrange(states_base) %>% \n  mutate(state_id = row_number()) %>% \n  select(state_id, everything())\n\n\n# All states are properly matched\n\n# Next, add state region\nstates_region <- tibble(states_base = state.name,\n                        region = state.region)\n\n\n## create states table: \ndf_states <- states_list %>% \n  left_join(x = .,\n            y = states_region,\n            by = \"states_base\")\n\n```\n\n\n**Result:**\n\n-    Created master state list with standardized names and IDs\n\n-    Removed non-state territories (e.g., Puerto Rico)\n\n### Main Table Creation\n\n```{r}\n\n## Get relevant dates:\ndf_dates <- tibble(date = seq.Date(from = df_covid19 %>% \n                                     pull(date) %>% \n                                     min(.),\n                                   to = df_covid19 %>% \n                                     pull(date) %>% max(.),\n                                   by = \"1 day\"))\n\n## Create Main table:\ndf_main <- df_states %>% \n  # cross join:\n  cross_join(x = .,\n            y = df_dates)\n\n\n## cehck:\ncount_states_base <- df_main %>% \n  count(states_base) %>% as.data.frame()\n\ndf_main <- df_main %>%\n  mutate(across(states_base:state_vaccine, str_trim))\n\ndf_covid19 <- df_covid19 %>%\n  mutate(state = str_trim(state))\n\ndf_gdp <- df_gdp %>%\n  mutate(state = str_trim(state))\n\ndf_pop <- df_pop %>%\n  mutate(state = str_trim(state))\n\ndf_covid19_response <- df_covid19_response %>%\n  mutate(state = str_trim(state))\n\ndf_vaccine <- df_vaccine %>%\n  mutate(state = str_trim(state))\n\ndf_joined <- df_main %>% \n  left_join(x = .,\n            y = df_covid19 %>% select(state, date, \n                                      confirmed, deaths),\n            by = c(\"state_covid19\" = \"state\",\n                   \"date\" = \"date\")) %>% \n  left_join(x = .,\n            y = df_gdp,\n            by = c(\"state_gdp\" = \"state\")) %>% \n  left_join(x = .,\n            y = df_pop,\n            by = c(\"state_pop\" = \"state\")) %>% \n  left_join(x = .,\n            y = df_vaccine,\n            by = c(\"state_vaccine\" = \"state\",\n                   \"date\" = \"date\")) %>% \n  left_join(x = .,\n            y = df_covid19_response,\n            by = c(\"state_covid19_response\" = \"state\",\n                   \"date\" = \"date\")) %>% \n  # remove redundant columns:\n  select(-c(\"state_covid19\", \"state_gdp\", \n            \"state_vaccine\", \"state_vaccine\", \"state_pop\")) %>% \n  # re-arrange:\n  select(state_id,\n         state = states_base,\n         region,\n         date,\n         confirmed_total = confirmed,\n         deaths_total = deaths,\n         daily_vacc_doses = vaccinations,\n         population = pop,\n         everything()) %>% \n  arrange(state, date)\n\n\n\ndf.main <- df_joined\n\n\n```\n\n**Result:**\n\n-    Creates a sequence of dates from minimum to maximum date sequence.\n\n-   Creates the main table using a cross join on the states list and the\n    date sequence created.\n\n-   I removed the leading and trailing white spaces in the state names\n    for the 5 primary datasets.\n\n    -   \\- I had a wrong result merging without doing this step.\n\n    -   How come? I found that some records were overlooked and not\n        properly match which was quite odd because I thought R\n        automatically trims white spaces in character vectors when you\n        import the data.\n\n    -   My solution: I took the preventative step of removing the\n        white-spaces.\n\n    -   I realized it was important to remove the trailing white spaces\n        to preveent wrong merging results in textual data.\n\n-    Merges the 5 thoroughly cleaned data-sets to the `df.main` (main)\n    table that will be used for data analysis.\n\n#### Replace Missing Values and Negative Records with Zero\n\n```{r}\n\n## check for missing data for non-vaccination data:\nmissing_conf_total <- df.main %>% \n  filter(is.na(confirmed_total)) %>%  # to check for missing values\n  nrow()  # count the number of rows for missing values\n\nmissing_deaths_total <- df.main %>% \n  filter(is.na(deaths_total)) %>%  # to check for missing values\n  nrow() \n\n# Get vaccination starting date:\nstarted_date_vacc <- df.main %>% \n  filter(is.na(daily_vacc_doses)) %>% nrow()\n# There are 14050 missing data for vaccination doses.\n\n\n# Get the minimum date for non-missing values of vaccination doses\ndf_state_vaccDatesMin <- df.main %>% \n  filter(!is.na(daily_vacc_doses)) %>% \n  group_by(state) %>% \n  reframe(min_date = min(date)) %>% \n  summarise(min_date = min(min_date))\n\n\n## replace NAs, calculate daily counts and total counts\ndf.main <- df.main %>% \n  mutate(population_in_mil = round(population / 10e6, 2),\n         daily_vacc_doses = replace_na(daily_vacc_doses, \n                                       replace = 0)) %>%\n  # get daily count:\n  group_by(state) %>% \n  mutate(confirmed_daily_cases = \n           confirmed_total - lag(confirmed_total, n = 1),\n         death_daily_cases = \n             deaths_total - lag(deaths_total, n = 1)) %>% \n  mutate(vaccine_doses_total = cumsum(daily_vacc_doses)) %>% \n  ungroup() %>% \n  select(state_id:date,\n         confirmed_total, confirmed_daily_cases,\n         deaths_total, death_daily_cases,\n         vaccine_doses_total, daily_vacc_doses,\n         everything())\n\n\n## check for negative values and replace them with zero, because some data were not reported:\ndf.main <- df.main %>% \n  mutate_at(.tbl = .,\n            .vars = c(\"confirmed_daily_cases\", \n                      \"death_daily_cases\", \"vaccine_doses_total\"),\n            .funs = function(.vars) {ifelse(.vars < 0, 0, .vars)}) \n\n\n```\n\n**Result:**\n\n-   Since I used left-join, I expected some Missing Values on the merged\n    records.\n\n-   Perhaps I should have used inner join, however, I wanted to account\n    for days where the states failed to record the cases, thereby\n    catching the inconsistencies and noting them in the EDA.\n\n-   Because we replaced missing records with 0, I suspected performing a\n    lag for `confirmed_total`, `deaths_total` and `vaccine_doses_total`,\n    would cause some negative values which means there was a drop in the\n    report from the states.\n\n-   I replaced these negative values with 0 since you cannot quantify\n    that you had negative number of reported cases. This doesn't really\n    make sense to others unless you're being mathematical.\n\n\n\n### Check the total number of infections and deaths by region:\n\n```{r}\n\n\n## Get total number of infections and deaths:\n# - states per region\ndf.main %>% \n  group_by(region) %>% \n  reframe(states = n_distinct(state),\n          total_death = sum(deaths_total),\n          confirmed_total = sum(confirmed_total))\n\n\n## show states on map:\nmax_date <- df.main %>% pull(date) %>% max(.)\n\n## states to lower case:\ndf.main <- df.main %>% \n  mutate(state_ = str_to_lower(string = state))\n\n\ndf.main %>% \n  filter(date == max_date) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = group)) +\n  geom_polygon(aes(fill = region),\n               color = \"black\") +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank())\n\n```\n\n**Results:**\n\n-   Here, I wanted to get a rough feel for the total number of\n    infections and deaths by region and I used a map to see that.\n\n## Question 1: How does total number of confirmed cases and COVID-19 related deaths change over time? - on a regional level - on a national level - on a state level:\n\nHere, we want to look at the total number of confirmed cases as they\nchange over time.\n\n```{r}\n## Get relative counts:\ndf.main <- df.main %>% \n  mutate(confirmed_totalPerc = confirmed_total / population,\n          deaths_totalPerc = deaths_total / population)\n  \n\n ## add region groups:\ndf_regionGroup <- df.main %>% \n  group_by(region) %>% \n  count(state) %>% \n  ungroup() %>% \n  arrange(region, state) %>% \n  # add state count:\n  group_by(region) %>% \n  mutate(states = n(),\n         id = row_number()) %>% \n  ungroup() %>% \n  # add group id:\n  mutate(group = case_when(id <= round(states / 2, 0) ~ 1, \n                           T ~ 2)) %>% \n  mutate(region_group = paste(region, \"- group\", group, sep = \" \")) %>% \n  select(state, region_group)\n\n\n\n## bring groups to main table:\ndf.main <- df.main %>%\n  left_join(x = .,\n            y = df_regionGroup,\n            by = \"state\")\n\n## Plot:\nregion_group <- df_regionGroup %>% \n  distinct(region_group) %>% \n  pull(region_group)\n\n#plotConfirmedCasesTotal(region.group = \"Northeast - group 1\")  \n\nplot <- map(.x = region_group, .f = ~plotConfirmedCasesTotal(region.group = .x))\n\nprint(plot)\n\n```\n\n**Features and Outputs:**\n\n-   I created new columns for relative counts in percentage by dividing\n    the infection and deaths total by the population.\n\n-   I added a region group column for each region, so I can properly\n    categorize by each region. It felt easier for me this way.\n\n-   Then I created a plot for each region's group to track the\n    pandemic's progression for each region.\n\n## Question 2: Which US state had the highest percentage of confirmed cases and deaths (relative count)?\n\n```{r}\n\n## bar chart:\nplot <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, state, confirmed_totalPerc, deaths_totalPerc) %>% \n  rename(`confirmed total %` = confirmed_totalPerc, \n         `death total %` = deaths_totalPerc) %>% \n  # convert from wide to long:\n  pivot_longer(cols = c(`confirmed total %`, `death total %`),\n               names_to = \"percentage\",\n               values_to = \"values\") %>% \n  group_by(state) %>% \n  mutate(total_perc = sum(values)) %>% \n  ungroup() %>% \n  arrange(total_perc, state) %>% \n  mutate(state = as.factor(state)) %>% \n  mutate(state = fct_inorder(state)) %>% \n  ggplot(mapping = aes(x = values,\n                       y = state,\n                       fill = region)) +\n  geom_col(color = \"black\") +\n  facet_wrap(percentage ~ .,\n             scales = \"free\") + \n  xlab(\"Percentage of State Population\") +\n  ylab(\"State\") +\n  ggtitle(\"Barplot of Confirmed Cases and Deaths for Each State\") +\n  scale_fill_viridis_d() +\n  theme_minimal()\n\ndir = \"./explore\"\nif (!dir.exists(dir))\n{\n    dir.create(dir)\n}\n\n# export plot:\nggsave(filename = \n         \"./explore/02_Barplot_of_Confirmed_Cases_and_Deaths_Per_State.png\",\n       plot = plot,\n       width = 30,\n       height = 25,\n       units = \"cm\")\n\n\n\ndf_samp <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, region_group, state, state_, confirmed_totalPerc, deaths_totalPerc) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  rename(`confirmed total %` = confirmed_totalPerc, \n         `death total %` = deaths_totalPerc) %>% \n  pivot_longer(cols = c(`confirmed total %`, `death total %`),\n               names_to = \"percentage\",\n               values_to = \"values\") %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = state)) +\n  geom_polygon(aes(fill = values),\n               color = \"black\",\n               show.legend = T) +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank()) + \n  scale_fill_viridis_c(option = \"inferno\")\n\n\n## Create a map regarding relative counts:\ndf.main <- df.main %>% \n  rename(`confirmed total %` = confirmed_totalPerc, \n         `death total %` = deaths_totalPerc)\n\n\np2 <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, state_, state, `confirmed total %`, `death total %`) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = state)) +\n  geom_polygon(aes(fill = `confirmed total %`),\n               color = \"black\",\n               show.legend = T) +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"Percentage of Confirmed Cases for Each State Population\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank()) + \n  scale_fill_viridis_c(option = \"inferno\")\n\n\np1 <- df.main %>% \n  filter(date == max_date) %>% \n  select(region, state_, state, `confirmed total %`, `death total %`) %>% \n  # get longitude and latitude for each state:\n  left_join(x = .,\n            y = map_data(\"state\"),\n            by = c(\"state_\" = \"region\")) %>% \n  ggplot(mapping = aes(x = long,\n                       y = lat,\n                       group = state)) +\n  geom_polygon(aes(fill = `death total %`),\n               color = \"black\",\n               show.legend = T) +\n  xlab(\"\") +\n  ylab(\"\") +\n  ggtitle(\"Percentage of Death Cases for Each State Population\") +\n  theme_bw() +\n  theme(axis.ticks = element_blank(),\n        axis.text = element_blank()) + \n  scale_fill_gradient(low = \"white\", high = \"black\")\n\nplot <- plot_grid(p1, p2, nrow = 2)\nprint(plot)\n\n# export plot:\nggsave(filename = \n         \"./explore/02_Map_of_Confirmed_Cases_and_Deaths_Per_State.png\",\n       plot = plot,\n       width = 30,\n       height = 25,\n       units = \"cm\")\n\n```\n\n**Results:**\n\n-   Bar charts are created here for relative counts in percentage of\n    death cases and infection for each state population.\n\n-   Maps are also created to see the percentage across all states using\n    a continuous scale for the color.\n\n-   Plots are then saved to `./explore` directory.\n\n## Question 3: Daily Pandemic Dynamics: How do daily confirmed cases and deaths change over time?\n\nHere, we want to look at how daily confirmed cases and deaths change\nover time. Essentially, we'll be performed a time series. The plot in\nthe code block below will have jumps that we will smoothen out in the\nsecond code block. The first is kind of to see for ourselves the jags,\nwhich will help us realize the *need* for a moving average!\n\n```{r}\n\nplot <- df.main %>% \n  group_by(state, date) %>% \n  arrange(state, date) %>% \n  mutate_at(.tbl = .,\n            .vars = c(\"confirmed_daily_cases\", \"death_daily_cases\"),\n            .funs = function(x){ifelse(is.na(x), 0, x)}) %>% \n  pivot_longer(data = .,\n               cols = c(\"confirmed_daily_cases\", \"death_daily_cases\"),\n               names_to = \"daily_cases\",\n               values_to = \"values\") %>% \n  ggplot(mapping = aes(x = date,\n                       y = values,\n                       color = daily_cases)) +\n  geom_line(show.legend = F) + \n  facet_wrap(region ~ ., scales = \"free\")\n\nprint(plot)\n\n```\n\n**Results:**\n\n-   Here, you will see that our first time series have jumps since\n    missing values and negative were replaced with zeros earlier in the\n    data cleaning because there were inconsistencies in the reporting of\n    data by states.\n\n-   Instead, we use a moving average to smooth out these jumps.\n\n```{r}\nlibrary(zoo)\n\ndf.main <- df.main %>% \n  group_by(state, date) %>% \n  arrange(state, date) %>% \n  mutate_at(.tbl = .,\n            .vars = c(\"confirmed_daily_cases\", \"death_daily_cases\"),\n            .funs = function(x){ifelse(is.na(x), 0, x)})\n\n\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  group_by(state) %>% \n  mutate( across( .cols = c(confirmed_daily_cases, death_daily_cases),\n                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, \n                              align = \"right\", na.rm = TRUE),\n      .names = \"{.col} 7d Avg\")) %>% \n  ungroup()\n\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  group_by(state) %>% \n  mutate( across( .cols = c(confirmed_daily_cases, death_daily_cases),\n                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, \n                              align = \"right\", na.rm = TRUE),\n      .names = \"{.col} 7d Avg\")) %>% \n  ungroup()\n\n# data validation \nvalidate_dailyCases <- df.main %>% \n  filter(is.na(`confirmed_daily_cases 7d Avg`)) %>% \n  select(`confirmed_daily_cases 7d Avg`) %>% \n  nrow()\n\nvalidate_deaths <- df.main %>% \n  filter(is.na(`death_daily_cases 7d Avg`)) %>% \n  select(`death_daily_cases 7d Avg`) %>% \n  nrow()\n\n\n# Plot for each region:\nplot1 <- df.main %>% \n  pivot_longer(data = .,\n               cols =\n                 c(`confirmed_daily_cases 7d Avg`, `death_daily_cases 7d Avg`),\n               names_to = \"daily_cases\",\n               values_to = \"values\") %>% \n  ggplot(mapping = aes(x = date,\n                       y = values,\n                       color = daily_cases)) +\n  geom_line(show.legend = F, alpha = 0.7) + \n  scale_fill_viridis_d() +\n  facet_wrap(region ~ ., scales = \"free\")\n\nprint(plot1)\n\n# Plot:\nplot <- map(.x = region_group, \n    .f = ~ plot7DayAverage(region.group = .x))\n\nprint(plot)\n```\n\n**Features:**\n\n-   We added a 7 day moving average columns for the\n    `confirmed_daily_cases` and `death_daily_cases` to the `df.main`\n\n-   The plot returned from the code block should show the smoothed time\n    series for the pandemic dynamics.\n\n## Question 4: Is there a connection between state wealth, state population, confirmed cases and deaths?\n\nI'll reframe a bit: Do state wealth and/or state population have an\neffect on total percentage of confirmed cases and deaths?\n\nThough we cannot say it DOES, but plotting the scatterplot will show if\nthere is some kind of relationship that we can notice ourselves.\n\n```{r}\n\nplot <- df.main %>% \n  filter(date == max_date) %>% \n  ggplot(aes(x = `confirmed total %`,\n             y = `death total %`,\n             size = population_in_mil,\n             color = gdp_per_capita)) +\n  geom_point(alpha = 0.75,\n             show.legend = T) +\n  facet_wrap(. ~ region, scales = \"free\") +\n  scale_color_gradient(low=\"brown1\", high=\"green\") +\n  scale_size_area(max_size = 30) +\n  theme_minimal() +\n  xlab(\"Total Confirmed Cases %\") +\n  ylab(\"Total Deaths %\") +\n  ggtitle(\"Total Confirmed Cases and Total Deaths % VS GDP and population\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\nfilename <- file.path(paste0(\"./explore/04_total_confirmed_deaths_perc_gdp_pop_and_scatter.png\"))\n\n# Save plot\nggsave(filename = filename,\n       plot = plot,\n       width = 35, height = 25, units = \"cm\",\n       dpi = 1200)\n\nprint(plot)\n\n```\n\n**Features:**\n\n-   We plot scatter-plots to try to visualize the relationship.\n\n-   These plots are saved in the `./explore` directory as well.\n\n## Question 5: Does vaccination help fighting the COVID-19 pandemic? i.e does vaccination help decrease covid-19 confirmed cases and death toll?\n\n```{r}\nplot <- map(.x = region_group,\n    .f = ~ plot_vaccineDosesTotal_7DayAVg(region.group = .x))\nprint(plot)\n\n```\n\n**Features:**\n\n-   Here, we plot the moving averages of the cummulative sum of vaccine\n    doses already calculated from before to see the trend of the does,\n    confirmed cases and death toll.\n\n## Question 6: Can you see the effect of government response against COVID-19 pandemic?\n\nHere we show on map how number of COVID-case have changed over time\n(monthly).\n\n```{r}\n\n# add date id and snapshot flag\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  # date id per state:\n  group_by(state) %>% \n  mutate(date_id = row_number()) %>% \n  ungroup() %>% \n  # add date snapshot flag for every 30th day:\n  mutate(date_snapshot_flag = case_when(date_id == 1 ~ TRUE,\n                                       date_id == max_date ~ TRUE,\n                                       date_id %% 30 == 0 ~ TRUE,\n                                       TRUE ~ FALSE))\n\n# plot the maps:\nvariables <- c(\"confirmed_total\", \"deaths_total\", \"vaccine_doses_total\")\n\nplots <- map(variables, ~ plotCovid19Map_overTime(df.main, .x))\n\n\nprint(plots)\n\n```\n\n**Features:**\n\n-   A new columns for the date flag for every 30th day (month) is\n    created.\n\n-   Stacked area charts of covid 19 indicators in a log-scale time\n    series are shown, as well as the government response metrics.\n\n## Question 7: How High was the response rate of each state towards pandemic?\n\nWe sort by state, date then the stringency index, grouping by state and\nseeing the stacked area charts of the stringency index for display.\n\n```{r}\nwStringencyIndex <- df.main %>% \n  arrange(state, date, stringency_index_for_display) %>% \n  # date id per state:\n  group_by(state) %>% \n  mutate(date_id = row_number()) %>% \n  ungroup() %>% \n  # add date snapshot flag for every 30th day:\n  mutate(date_snapshot_flag = case_when(date_id == 1 ~ TRUE,\n                                        date_id == max_date ~ TRUE,\n                                        date_id %% 30 == 0 ~ TRUE,\n                                        TRUE ~ FALSE))\n\nplots <- map(\"stringency_index_for_display\",\n             ~ plotCovid19Map_overTime(df.main, .x))\n\n\nprint(plots)\n```\n\n## Question 7: How each state is doing on a state level: How selected states are coping with the pandemic over time?\n\nHere we look at the vaccine smoothed daily counts by creating first the\n7 day moving average column and plotting for some states here:\nCalifornia, Texas, New York are used as examples.\n\n```{r}\n## vaccine smoothed daily counts:\ndf.main <- df.main %>% \n  arrange(state, date) %>% \n  group_by(state) %>% \n  mutate(across( .cols = daily_vacc_doses,\n                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, \n                              align = \"right\", na.rm = TRUE),\n                 .names = \"{.col} 7d Avg\")) %>% \n  ungroup()\n\n\n\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"California\")\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"New York\")\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"Texas\")\nplotCovid19Indicators_stateLevel(data = df.main, state_selection = \"Nebraska\")\n\n\n\n\n\n```\n\n# Export Data\n\nI exported the data cleaned, merged and with the newly created columns\nin this EDA, if you would like to perform more analysis. You should be\nable to see it in my github repo as `df-main.csv` file.\n\n```{r}\nwrite_csv(x = df.main, file = \"df-main.csv\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"results":"hide","fig.show":"hide","engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"eda.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":{"light":"flatly","dark":"darkly"},"title":"EDA Process","date":"2025-02-11","editor":{"markdown":{"wrap":72}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}