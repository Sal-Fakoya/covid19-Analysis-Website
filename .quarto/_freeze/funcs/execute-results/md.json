{
  "hash": "9a25021760bace963b9804fade5297d3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Custom Functions \ndate: \"2025-02-11\"\nformat: hugo-md\noutput: html_document\ntoc: true\n# jupyter: python3\n---\n\n\n\n\n# Custom EDA Functions Documentation\n\nThis page explains the purpose and usage of custom functions developed for the COVID-19 exploratory data analysis performed in this project.\n\n# Dependencies\nAll functions require:\n+ tidyverse\n+ cowplot\n+ viridis\n+ tidystringdist (for `matchStates` function)\n+ rlang\n\n\n## 1. Data Preparation Functions\n\n### `renameState(df)`\n\n**Purpose:** Standardizes state column naming across datasets  \n\n**Parameters:**\n- `df`: Input dataframe \n\n**Description:**  \nRenames any column containing \"state\" in its name to \"state\". Ensures consistent column naming across different datasets.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nrenameState <- function(df) {\n  df %>% rename_with(~ \"state\", contains(\"state\"))\n}\n```\n:::\n\n\n\n\n\n### `matchStates(states_base=states_list, data, col_name)`\n\n**Purpose:** Also for data wrangling purpose, it fuzzy matches the U.S state names to a states_base column as reference. The states_base used in my EDA is from the datasets::state.name.\n\n**Parameters:**\n- `states_base`: Reference list of states (default: states_list in the datasets::state.name)\n- `data`: Dataset containing state names to match\n- `col_name:` Name of column containing state names in the `data` parameter.\n\n**Description:**\nUses Optimal String Alignment (OSA) distance to match state names between datasets and reference list. Helps resolve naming inconsistencies.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchStates <- function(states_base = states_list,\n                        data,\n                        col_name)\n{\n  require(tidystringdist)\n  require(rlang)\n  \n  # extract unique state names from given data source.\n  states_data <- data %>% \n    distinct(state)\n  \n  # create table of all combinations: state pairs:\n  states_comb <- expand.grid(states_base = states_list %>% \n                               pull(state_base),\n                             state = states_data %>% pull(state))\n  \n  # compute string distance:\n  t1 <- tidy_stringdist(df = states_comb,\n                  v1 = states_base,\n                  v2 = state,\n                  method = \"osa\") %>% \n    # sort best name match per state and add matching rank:\n    arrange(states_base, osa) %>% \n    group_by(states_base) %>% \n    mutate(rank = row_number()) %>% \n    ungroup() %>% \n    # filter top ranks:\n    filter(rank == 1) %>% \n    select(states_base, {{ col_name }} := state)\n  \n  print(t1)\n  \n  \n  # t2 is an easier fix...\n  t2 <- tidy_stringdist(df = states_comb,\n                        v1 = states_base,\n                        v2 = state,\n                        method = \"osa\") %>% \n    filter(osa == 0) %>% \n    select(states_base, state) %>% \n    arrange(states_base)\n  \n  return (t1)\n  \n}\n```\n:::\n\n\n\n\n\n## 2. Data Inspection Functions\n\n\n### `countNA(df)`\n\n**Purpose:** Analyze missing values patterns\n\n**Parameters:**\n- `df`: Input dataframe  \n\n**Outputs:**\n- Dataframe with NA counts and percentages\n- Dual plots (absolute counts and percentages)\n\n**Description:**  \nProvides missing value analysis with numerical summary and visual representation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountNA <- function(df) {\n  require(tidyverse)\n  require(cowplot)\n  \n  # Count NAs using summarise across all columns\n  df_na_count <- df %>%\n    summarise(across(everything(), ~ sum(is.na(.)))) %>%\n    pivot_longer(cols = everything(), names_to = \"col\", values_to = \"NAs\") %>%\n    mutate(NA_perc = round(NAs / nrow(df) * 100, 2))\n  \n  print(df_na_count)\n  \n  # Absolute NA count plot\n  p1 <- df_na_count %>%\n    ggplot(aes(x = col, y = NAs, fill = col)) +\n    geom_col(show.legend = FALSE) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 90, face = \"bold\")) +\n    scale_fill_viridis_d(option = \"magma\") +\n    scale_x_discrete(labels = function(x) str_trunc(x, width = 10, ellipsis = \"...\")) +\n    geom_text(aes(label = NAs), vjust = 0)\n  \n  # Relative NA percentage plot\n  p2 <- df_na_count %>%\n    ggplot(aes(x = col, y = NA_perc, fill = col)) +\n    geom_col(show.legend = FALSE) +\n    scale_y_continuous(limits = c(0, 100)) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 90, face = \"bold\")) +\n    scale_fill_viridis_d(option = \"magma\") +\n    scale_x_discrete(labels = function(x) str_trunc(x, width = 12, ellipsis = \"...\")) +\n    geom_text(aes(label = paste0(NA_perc, \"%\")), vjust = 0)\n  \n  plot_grid(p1, p2, nrow = 2)\n}\n```\n:::\n\n\n\n\n\n### `checkTimeSpan(df)`\n\n**Purpose:** Checks distinct dates for each state and returns a bar plot showing the maxinmum and minimum date, thereby allowing us to check states with useful data. \n\n**Parameters:**\n- `df`: Input dataframe with date column\n\n**Outputs:**\n- Date range on a bar plot\n\n**Description:**  \n- returns a barplot showing the states with their maximum and minimum dates. There is no conclusion to be made based on the plots, however, I found Puerto Rico and United States as part of the states. This will be filtered out later in the data cleaning process.\n\n\n\n## 3. Visualization Functions\n\n### `plotConfirmedCasesTotal(data=df.main, region.group)`\n**Purpose:** Tracks pandemic progression based on region. \n\n**Parameters:**\n- `data`: Main dataframe (default: df.main)\n- `region.group`: Geographic region to analyze\n\n**Output:**\n- 2x2 panel plot with absolute/relative infection cases and deaths over time on a state level.\n- Auto-saves PNG to directory\n\n**Description:**\nShows both absolute counts and population-adjusted percentages for COVID-19 metrics across states for each `region.group`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotConfirmedCasesTotal <- function(data = df.main, region.group)\n{\n  \n  # data:\n  plot_data <- data %>% \n    filter(region_group == region.group)\n  \n  # confirmed cases absolute count\n  p11 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = confirmed_total,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Number of Confirmed cases total\") +\n    ggtitle(paste(\"Infected Cases /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p11)\n  \n  ## confirmed cases relative count:\n  p21 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = confirmed_totalPerc,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Percentage(%) of Confirmed cases total\") +\n    ggtitle(paste(\"Infected Cases /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p21)\n  \n  \n  # death cases absolute count\n  p12 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = deaths_total,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Number of Deaths total\") +\n    ggtitle(paste(\"Death /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p12)\n  \n  ## confirmed cases relative count:\n  p22 <- plot_data %>% \n    ggplot(mapping = aes(x = date,\n                         y = deaths_totalPerc,\n                         group = state,\n                         color = state)) +\n    geom_line() +\n    geom_point(alpha = 0.7) +\n    scale_colour_viridis_d() +\n    xlab(\"Date\") +\n    ylab(\"Percentage(%) of Deaths total\") +\n    ggtitle(paste(\"Death /\", region.group, sep = \" \")) +\n    theme_minimal()\n  \n  print(p22)\n  \n  plot <- plot_grid(p11, p12, p21, p22, nrow = 2, ncol = 2)\n  \n  #plot_export\n  \n  if (!dir.exists(\"./explore\"))\n  {\n    dir.create(\"./explore\")\n  }\n  \n  ggsave(filename = paste(\"./explore/01_confirmed_cases_and_deaths\",\n                          region.group, \".png\"),\n         plot = plot,\n         width = 30, height = 20, \n         units = \"cm\",\n         dpi = 1200)\n  \n}\n```\n:::\n\n\n\n\n\n\n### `plot7DayAverage(data=df.main, region.group, output_dir=\"./explore\")`\n\n**Purpose:** Analyzes trend of Covid-19 infection cases and death trend on a 7 day average for each region.\n\n**Parameters:**\n- `data`: Main dataframe (default: df.main)\n- `region.group`: Geographic region\n- `output_dir`: directory to save plot (default: ./explore)\n\n**Features:**\n- Error checking for valid region groups\n- Modular plot generation\n- Standardized plot-saving format\n\n**Output:**\nDual time series plots of 7-day moving averages for infection cases and deaths.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot7DayAverage <- function(data = df.main, region.group, output_dir = \"./explore\") \n  {\n  # Ensure necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Verify that region.group exists\n  if (!region.group %in% unique(data$region_group)) {\n    stop(\"Error: The specified region.group does not exist in the data.\")\n  }\n  \n  # Filter data\n  plot_data <- data %>% \n    filter(region_group == region.group)\n  \n  # Helper function for creating plots\n  create_plot <- function(data = plot.data, \n                          y_var, title_text, y_label_text) {\n    data %>%\n      ggplot(aes(x = date, y = {{ y_var }}, group = state, color = state)) +\n      geom_line(alpha = 0.8, linewidth = 0.8) +\n      geom_point(alpha = 0.8, size = 0.8, show.legend = FALSE) +\n      scale_colour_viridis_d() +\n      labs(title = paste(title_text, \"-\", region.group),\n           x = \"Date\",\n           y = y_label_text,\n           color = \"State\") +\n      theme_minimal() +\n      theme(plot.title = element_text(hjust = 0.5))\n  }\n  \n  # Create plots\n  p1 <- create_plot(plot_data, \n                    `confirmed_daily_cases 7d Avg`, \n                    \"Infected Daily Cases\", \n                    \"7-Day Moving Average of Confirmed Cases\")\n  p2 <- create_plot(plot_data, \n                    `death_daily_cases 7d Avg`, \n                    \"Deaths\", \n                    \"7-Day Moving Average of Deaths\")\n  \n  # Combine plots\n  combined_plot <- plot_grid(p1, p2, nrow = 2)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"03_confirmed_cases_and_deaths_on_7Day_Avg_\", region.group, \".png\"))\n  \n  # Save plot\n  ggsave(filename = filename,\n         plot = combined_plot,\n         width = 35, height = 25, units = \"cm\",\n         dpi = 1200)\n  \n  # Return the combined plot\n  return(combined_plot)\n}\n```\n:::\n\n\n\n\n\n\n### `plotCovid19Map_overTime(data=df.main, var, output_dir=\"./explore\")`\n**Purpose:** Show on map how number of COVID-case have changed over time (monthly)\n\n**Parameters:**\n- `data`: Main dataframe\n- `var`: Variable to visualize (confirmed_total/deaths_total/vaccine_doses_total)\n- `output_dir:` Save location for plots\n\n**Output:**\nFaceted choropleth map showing variable `var` evolution across monthly snapshots.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotCovid19Map_overTime <- function(data = df.main, var,\n                                    output_dir = \"./explore\") \n  {\n  \n  # Ensure the necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Filter and prepare data\n  plot_data <- data %>% \n    filter(date_snapshot_flag) %>% \n    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% \n    left_join(map_data(\"state\"), by = c(\"state_\" = \"region\"))\n  \n  # Helper function for creating plots\n  create_plot <- function(data, var, title_text) {\n    data %>%\n      ggplot(aes(x = long, y = lat, group = group)) +\n      geom_polygon(aes_string(fill = var), \n                   color = \"black\", show.legend = TRUE) +\n      facet_wrap(~ date) +\n      ggtitle(title_text) +\n      theme_bw() + \n      theme(axis.ticks = element_blank(),\n            axis.text = element_blank(),\n            plot.title = element_text(hjust = 0.5)) + \n      scale_fill_gradient(low = \"white\", high = \"red\")\n  }\n  \n  # Create plot based on variable\n  title <- paste(\"Map of Covid-19\", gsub(\"_\", \" \", var), \"Over Time\")\n  plot <- create_plot(plot_data, var, title)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"06_Map_of_\", var, \"_over_time.png\"))\n  \n  # Save plot\n  ggsave(filename = filename, plot = plot, width = 35,\n         height = 25, units = \"cm\", dpi = 1200)\n  \n  # Return the plot\n  return(plot)\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## 4 Advanced Analysis Function:\n\n### `plotCovid19Indicators_stateLevel(data=df.main, state_selection, output_dir=\"./explore\")`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotCovid19Map_overTime <- function(data = df.main, var,\n                                    output_dir = \"./explore\") \n  {\n  \n  # Ensure the necessary libraries are loaded\n  require(ggplot2)\n  require(cowplot)\n  require(viridis)\n  require(rlang)\n  \n  # Filter and prepare data\n  plot_data <- data %>% \n    filter(date_snapshot_flag) %>% \n    select(region, state_, state, date, confirmed_total, deaths_total, vaccine_doses_total, stringency_index_for_display) %>% \n    left_join(map_data(\"state\"), by = c(\"state_\" = \"region\"))\n  \n  # Helper function for creating plots\n  create_plot <- function(data, var, title_text) {\n    data %>%\n      ggplot(aes(x = long, y = lat, group = group)) +\n      geom_polygon(aes_string(fill = var), \n                   color = \"black\", show.legend = TRUE) +\n      facet_wrap(~ date) +\n      ggtitle(title_text) +\n      theme_bw() + \n      theme(axis.ticks = element_blank(),\n            axis.text = element_blank(),\n            plot.title = element_text(hjust = 0.5)) + \n      scale_fill_gradient(low = \"white\", high = \"red\")\n  }\n  \n  # Create plot based on variable\n  title <- paste(\"Map of Covid-19\", gsub(\"_\", \" \", var), \"Over Time\")\n  plot <- create_plot(plot_data, var, title)\n  \n  # Create output directory if it doesn't exist\n  if (!dir.exists(output_dir)) {\n    dir.create(output_dir)\n  }\n  \n  # Construct filename\n  filename <- file.path(output_dir, paste0(\"06_Map_of_\", var, \"_over_time.png\"))\n  \n  # Save plot\n  ggsave(filename = filename, plot = plot, width = 35,\n         height = 25, units = \"cm\", dpi = 1200)\n  \n  # Return the plot\n  return(plot)\n}\n```\n:::\n\n\n\n\n**Purpose:** plots Covid-19 Indicators (infection, deaths and government response) at the state-level monthly (there is a date snapshot flag for every 30th day captured in the in the EDA section before this function is called).\n\n**Parameters:**\n- `data`: Main dataframe (default: `df.main`)\n- `state_selection`: Target state\n- `output_dir`: Save location (`\"./explore\"` by default).\n\n**Outputs:**\n- Stacked area chart: Cumulative totals\n- Log-scale time series: 7-day averages\n- Government response metrics\n\n**Description:**\nPlots and saves the stacked area chart in the `output_dir`.\n\n\n# Usage Notes\n+ File outputs are automatically saved to `./explore` directory.\n+ Date column must be present and properly formatted.\n+ Region groups must exist in dataframe's region_group column.\n+ String matching functions work best with clean text data.\n+ Map functions require state_ column existing in the dataframe in lowercase state names\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}