---
title: EDA Process
date: "2025-02-11"
toc: true
editor: 
  markdown: 
    wrap: 72
execute: 
  warning: false
  freeze: 'auto'
  results: "hide"
  fig.show: "hide"
---

# Data Cleaning Pipeline

This page is a continuation of the previous section and outlines the EDA
process performed for this COVID-19 analysis in the United States. In
this section, we'll create new columns for the 7 day moving average for
each numerical table from `df.main`. Using a 7 day moving average helps
smooth out the jumps we will have in the plots without the moving
instance. There will be a varietry of plots I created here before
getting there, and I will expand more on that in the sections below.

## 1. Initial Setup

```{r}
#| include: true
# Environment cleanup and package loading
rm(list = ls())
graphics.off()

library(tidyverse)
library(readr)
library(lubridate)
library(cowplot)
library(rio)
library(janitor)
library(tidystringdist)
library(zoo)

# after downloading the funcs.R file, uncomment the code below before running it.
source("./funcs.R")

dir = "./exported-data"

if (!dir.exists(dir))
{
  dir.create(dir)
}

df_covid19 <- read_csv(file =
                         paste0(dir, "/", "df-covid19.csv"))

df_covid19_response <- read_csv(file =
                                  paste0(dir, "/", "df-covid19-response.csv"))
df_gdp <- read_csv(file = paste0(dir, "/", "df-gdp.csv"))
df_pop <- read_csv(file = paste0(dir, "/", "df-pop.csv"))
df_vaccine <- read_csv(file = paste0(dir, "/", "df-vaccine.csv"))

```

## A few graphs before getting serious...

I made a few plots here just to kind of get a rough view of what the
data across each state by region and on the state-level. I wanted to get
a feel for the total number of infections and deaths and to see the
records in a map. This steps don't essentially finalize anything. I just
wanted a rough view on one or a few states before and while answering
real questions.


### Missing Value Handling

Next, we can check for missing values across all datasets:

```{r}

# Check missing values per column in all datasets
df_list <- list(
  df_covid19 = df_covid19, 
  df_gdp = df_gdp,
  df_pop = df_pop,
  df_covid19_response = df_covid19_response,
  df_vaccine = df_vaccine
)

lapply(df_list, countNA)  # Custom function to count NAs

```

**Key findings:** + Vaccination data contained 14,050 missing entries
handled via imputation + COVID-19 recovery/active cases showed
inconsistent reporting patterns + All other datasets had complete key
variables

### Check for Time-Span consistency of data recorded

We can do this using `checkTimeSpan` custom function from previous page.

```{r}

# check time span for each data frame:
checkTimeSpan(df_covid19) # Puerto Rico is not a state
checkTimeSpan(df_covid19_response)
checkTimeSpan(df_vaccine)


```

### State Name Standardization- String Matching

Ensured consistent state naming across datasets using fuzzy string
matching:

```{r}
#| fig.show: 'hide'
## national level:
plot <- df_covid19 %>% 
  select(state, date, confirmed:active) %>% 
  # convert from long to wide:
  pivot_longer(data =.,
               cols = c("confirmed", "deaths", "recovered", "active"),
               names_to = "variable",
               values_to = "values") %>% 
  # aggregate on a date and variable level:
  group_by(date, variable) %>% 
  reframe(values = sum(values, na.rm = T)) %>% 
  #plot:
  ggplot(mapping = aes(x = date, 
                       y = values, 
                       color = variable)) +
  geom_point(alpha = 0.7) +
  facet_grid(variable ~. , scales = "free")

# Observation from total number of cases on state and national level: All data regarding covid-19 infections are reported as running total."confirmed" and "deaths"  cases seem to be reported consistently, however, there are missing data and in some parts a drop of reported data in "recovered" and "active" cases.



# Step 1: Get a list of us state names:
states_list <- tibble(state_base = datasets::state.name)

## do state names matching with function in funcs.R
states_list_covid19 <- matchStates(data = df_covid19, 
                                   col_name = "state_covid19")
states_list_gdp <- matchStates(data = df_covid19,
                                   col_name = "state_gdp")
states_list_pop <- matchStates(data = df_covid19,
                                   col_name = "state_pop")
states_list_covid19_response <- matchStates(data = df_covid19,
                                            col_name =
                                          "state_covid19_response")
states_list_vaccine <- matchStates(data = df_covid19,
                                   col_name = "state_vaccine")



# Create a universal list by joining the lists:
states_list <- states_list_covid19 %>% 
  inner_join(x = .,
             y = states_list_gdp,
             by = "states_base") %>% 
  inner_join(x = .,
             y = states_list_pop,
             by = "states_base") %>% 
  inner_join(x = .,
             y = states_list_covid19_response,
             by = "states_base") %>% 
  inner_join(x = .,
             y = states_list_vaccine,
             by = "states_base") %>% 
  arrange(states_base) %>% 
  mutate(state_id = row_number()) %>% 
  select(state_id, everything())


# easier fix::
df_states_list <- list(
  states_list_covid19 = states_list_covid19,
  states_list_covid19_response = states_list_covid19_response,
  states_list_gdp = states_list_gdp,
  states_list_pop = states_list_pop,
  states_list_vaccine = states_list_vaccine)

states_list <- reduce(.x = df_states_list, 
                      .f = inner_join,
                      by = "states_base") %>% 
  arrange(states_base) %>% 
  mutate(state_id = row_number()) %>% 
  select(state_id, everything())


# All states are properly matched

# Next, add state region
states_region <- tibble(states_base = state.name,
                        region = state.region)


## create states table: 
df_states <- states_list %>% 
  left_join(x = .,
            y = states_region,
            by = "states_base")

```


**Result:**

-    Created master state list with standardized names and IDs

-    Removed non-state territories (e.g., Puerto Rico)

### Main Table Creation

```{r}

## Get relevant dates:
df_dates <- tibble(date = seq.Date(from = df_covid19 %>% 
                                     pull(date) %>% 
                                     min(.),
                                   to = df_covid19 %>% 
                                     pull(date) %>% max(.),
                                   by = "1 day"))

## Create Main table:
df_main <- df_states %>% 
  # cross join:
  cross_join(x = .,
            y = df_dates)


## cehck:
count_states_base <- df_main %>% 
  count(states_base) %>% as.data.frame()

df_main <- df_main %>%
  mutate(across(states_base:state_vaccine, str_trim))

df_covid19 <- df_covid19 %>%
  mutate(state = str_trim(state))

df_gdp <- df_gdp %>%
  mutate(state = str_trim(state))

df_pop <- df_pop %>%
  mutate(state = str_trim(state))

df_covid19_response <- df_covid19_response %>%
  mutate(state = str_trim(state))

df_vaccine <- df_vaccine %>%
  mutate(state = str_trim(state))

df_joined <- df_main %>% 
  left_join(x = .,
            y = df_covid19 %>% select(state, date, 
                                      confirmed, deaths),
            by = c("state_covid19" = "state",
                   "date" = "date")) %>% 
  left_join(x = .,
            y = df_gdp,
            by = c("state_gdp" = "state")) %>% 
  left_join(x = .,
            y = df_pop,
            by = c("state_pop" = "state")) %>% 
  left_join(x = .,
            y = df_vaccine,
            by = c("state_vaccine" = "state",
                   "date" = "date")) %>% 
  left_join(x = .,
            y = df_covid19_response,
            by = c("state_covid19_response" = "state",
                   "date" = "date")) %>% 
  # remove redundant columns:
  select(-c("state_covid19", "state_gdp", 
            "state_vaccine", "state_vaccine", "state_pop")) %>% 
  # re-arrange:
  select(state_id,
         state = states_base,
         region,
         date,
         confirmed_total = confirmed,
         deaths_total = deaths,
         daily_vacc_doses = vaccinations,
         population = pop,
         everything()) %>% 
  arrange(state, date)



df.main <- df_joined


```

**Result:**

-    Creates a sequence of dates from minimum to maximum date sequence.

-   Creates the main table using a cross join on the states list and the
    date sequence created.

-   I removed the leading and trailing white spaces in the state names
    for the 5 primary datasets.

    -   \- I had a wrong result merging without doing this step.

    -   How come? I found that some records were overlooked and not
        properly match which was quite odd because I thought R
        automatically trims white spaces in character vectors when you
        import the data.

    -   My solution: I took the preventative step of removing the
        white-spaces.

    -   I realized it was important to remove the trailing white spaces
        to preveent wrong merging results in textual data.

-    Merges the 5 thoroughly cleaned data-sets to the `df.main` (main)
    table that will be used for data analysis.

#### Replace Missing Values and Negative Records with Zero

```{r}

## check for missing data for non-vaccination data:
missing_conf_total <- df.main %>% 
  filter(is.na(confirmed_total)) %>%  # to check for missing values
  nrow()  # count the number of rows for missing values

missing_deaths_total <- df.main %>% 
  filter(is.na(deaths_total)) %>%  # to check for missing values
  nrow() 

# Get vaccination starting date:
started_date_vacc <- df.main %>% 
  filter(is.na(daily_vacc_doses)) %>% nrow()
# There are 14050 missing data for vaccination doses.


# Get the minimum date for non-missing values of vaccination doses
df_state_vaccDatesMin <- df.main %>% 
  filter(!is.na(daily_vacc_doses)) %>% 
  group_by(state) %>% 
  reframe(min_date = min(date)) %>% 
  summarise(min_date = min(min_date))


## replace NAs, calculate daily counts and total counts
df.main <- df.main %>% 
  mutate(population_in_mil = round(population / 10e6, 2),
         daily_vacc_doses = replace_na(daily_vacc_doses, 
                                       replace = 0)) %>%
  # get daily count:
  group_by(state) %>% 
  mutate(confirmed_daily_cases = 
           confirmed_total - lag(confirmed_total, n = 1),
         death_daily_cases = 
             deaths_total - lag(deaths_total, n = 1)) %>% 
  mutate(vaccine_doses_total = cumsum(daily_vacc_doses)) %>% 
  ungroup() %>% 
  select(state_id:date,
         confirmed_total, confirmed_daily_cases,
         deaths_total, death_daily_cases,
         vaccine_doses_total, daily_vacc_doses,
         everything())


## check for negative values and replace them with zero, because some data were not reported:
df.main <- df.main %>% 
  mutate_at(.tbl = .,
            .vars = c("confirmed_daily_cases", 
                      "death_daily_cases", "vaccine_doses_total"),
            .funs = function(.vars) {ifelse(.vars < 0, 0, .vars)}) 


```

**Result:**

-   Since I used left-join, I expected some Missing Values on the merged
    records.

-   Perhaps I should have used inner join, however, I wanted to account
    for days where the states failed to record the cases, thereby
    catching the inconsistencies and noting them in the EDA.

-   Because we replaced missing records with 0, I suspected performing a
    lag for `confirmed_total`, `deaths_total` and `vaccine_doses_total`,
    would cause some negative values which means there was a drop in the
    report from the states.

-   I replaced these negative values with 0 since you cannot quantify
    that you had negative number of reported cases. This doesn't really
    make sense to others unless you're being mathematical.



### Check the total number of infections and deaths by region:

```{r}


## Get total number of infections and deaths:
# - states per region
df.main %>% 
  group_by(region) %>% 
  reframe(states = n_distinct(state),
          total_death = sum(deaths_total),
          confirmed_total = sum(confirmed_total))


## show states on map:
max_date <- df.main %>% pull(date) %>% max(.)

## states to lower case:
df.main <- df.main %>% 
  mutate(state_ = str_to_lower(string = state))


df.main %>% 
  filter(date == max_date) %>% 
  # get longitude and latitude for each state:
  left_join(x = .,
            y = map_data("state"),
            by = c("state_" = "region")) %>% 
  ggplot(mapping = aes(x = long,
                       y = lat,
                       group = group)) +
  geom_polygon(aes(fill = region),
               color = "black") +
  xlab("") +
  ylab("") +
  ggtitle("") +
  theme_bw() +
  theme(axis.ticks = element_blank(),
        axis.text = element_blank())

```

**Results:**

-   Here, I wanted to get a rough feel for the total number of
    infections and deaths by region and I used a map to see that.

## Question 1: How does total number of confirmed cases and COVID-19 related deaths change over time? - on a regional level - on a national level - on a state level:

Here, we want to look at the total number of confirmed cases as they
change over time.

```{r}
## Get relative counts:
df.main <- df.main %>% 
  mutate(confirmed_totalPerc = confirmed_total / population,
          deaths_totalPerc = deaths_total / population)
  

 ## add region groups:
df_regionGroup <- df.main %>% 
  group_by(region) %>% 
  count(state) %>% 
  ungroup() %>% 
  arrange(region, state) %>% 
  # add state count:
  group_by(region) %>% 
  mutate(states = n(),
         id = row_number()) %>% 
  ungroup() %>% 
  # add group id:
  mutate(group = case_when(id <= round(states / 2, 0) ~ 1, 
                           T ~ 2)) %>% 
  mutate(region_group = paste(region, "- group", group, sep = " ")) %>% 
  select(state, region_group)



## bring groups to main table:
df.main <- df.main %>%
  left_join(x = .,
            y = df_regionGroup,
            by = "state")

## Plot:
region_group <- df_regionGroup %>% 
  distinct(region_group) %>% 
  pull(region_group)

#plotConfirmedCasesTotal(region.group = "Northeast - group 1")  

plot <- map(.x = region_group, .f = ~plotConfirmedCasesTotal(region.group = .x))

print(plot)

```

**Features and Outputs:**

-   I created new columns for relative counts in percentage by dividing
    the infection and deaths total by the population.

-   I added a region group column for each region, so I can properly
    categorize by each region. It felt easier for me this way.

-   Then I created a plot for each region's group to track the
    pandemic's progression for each region.

## Question 2: Which US state had the highest percentage of confirmed cases and deaths (relative count)?

```{r}

## bar chart:
plot <- df.main %>% 
  filter(date == max_date) %>% 
  select(region, state, confirmed_totalPerc, deaths_totalPerc) %>% 
  rename(`confirmed total %` = confirmed_totalPerc, 
         `death total %` = deaths_totalPerc) %>% 
  # convert from wide to long:
  pivot_longer(cols = c(`confirmed total %`, `death total %`),
               names_to = "percentage",
               values_to = "values") %>% 
  group_by(state) %>% 
  mutate(total_perc = sum(values)) %>% 
  ungroup() %>% 
  arrange(total_perc, state) %>% 
  mutate(state = as.factor(state)) %>% 
  mutate(state = fct_inorder(state)) %>% 
  ggplot(mapping = aes(x = values,
                       y = state,
                       fill = region)) +
  geom_col(color = "black") +
  facet_wrap(percentage ~ .,
             scales = "free") + 
  xlab("Percentage of State Population") +
  ylab("State") +
  ggtitle("Barplot of Confirmed Cases and Deaths for Each State") +
  scale_fill_viridis_d() +
  theme_minimal()

dir = "./explore"
if (!dir.exists(dir))
{
    dir.create(dir)
}

# export plot:
ggsave(filename = 
         "./explore/02_Barplot_of_Confirmed_Cases_and_Deaths_Per_State.png",
       plot = plot,
       width = 30,
       height = 25,
       units = "cm")



df_samp <- df.main %>% 
  filter(date == max_date) %>% 
  select(region, region_group, state, state_, confirmed_totalPerc, deaths_totalPerc) %>% 
  # get longitude and latitude for each state:
  left_join(x = .,
            y = map_data("state"),
            by = c("state_" = "region")) %>% 
  rename(`confirmed total %` = confirmed_totalPerc, 
         `death total %` = deaths_totalPerc) %>% 
  pivot_longer(cols = c(`confirmed total %`, `death total %`),
               names_to = "percentage",
               values_to = "values") %>% 
  ggplot(mapping = aes(x = long,
                       y = lat,
                       group = state)) +
  geom_polygon(aes(fill = values),
               color = "black",
               show.legend = T) +
  xlab("") +
  ylab("") +
  ggtitle("") +
  theme_bw() +
  theme(axis.ticks = element_blank(),
        axis.text = element_blank()) + 
  scale_fill_viridis_c(option = "inferno")


## Create a map regarding relative counts:
df.main <- df.main %>% 
  rename(`confirmed total %` = confirmed_totalPerc, 
         `death total %` = deaths_totalPerc)


p2 <- df.main %>% 
  filter(date == max_date) %>% 
  select(region, state_, state, `confirmed total %`, `death total %`) %>% 
  # get longitude and latitude for each state:
  left_join(x = .,
            y = map_data("state"),
            by = c("state_" = "region")) %>% 
  ggplot(mapping = aes(x = long,
                       y = lat,
                       group = state)) +
  geom_polygon(aes(fill = `confirmed total %`),
               color = "black",
               show.legend = T) +
  xlab("") +
  ylab("") +
  ggtitle("Percentage of Confirmed Cases for Each State Population") +
  theme_bw() +
  theme(axis.ticks = element_blank(),
        axis.text = element_blank()) + 
  scale_fill_viridis_c(option = "inferno")


p1 <- df.main %>% 
  filter(date == max_date) %>% 
  select(region, state_, state, `confirmed total %`, `death total %`) %>% 
  # get longitude and latitude for each state:
  left_join(x = .,
            y = map_data("state"),
            by = c("state_" = "region")) %>% 
  ggplot(mapping = aes(x = long,
                       y = lat,
                       group = state)) +
  geom_polygon(aes(fill = `death total %`),
               color = "black",
               show.legend = T) +
  xlab("") +
  ylab("") +
  ggtitle("Percentage of Death Cases for Each State Population") +
  theme_bw() +
  theme(axis.ticks = element_blank(),
        axis.text = element_blank()) + 
  scale_fill_gradient(low = "white", high = "black")

plot <- plot_grid(p1, p2, nrow = 2)
print(plot)

# export plot:
ggsave(filename = 
         "./explore/02_Map_of_Confirmed_Cases_and_Deaths_Per_State.png",
       plot = plot,
       width = 30,
       height = 25,
       units = "cm")

```

**Results:**

-   Bar charts are created here for relative counts in percentage of
    death cases and infection for each state population.

-   Maps are also created to see the percentage across all states using
    a continuous scale for the color.

-   Plots are then saved to `./explore` directory.

## Question 3: Daily Pandemic Dynamics: How do daily confirmed cases and deaths change over time?

Here, we want to look at how daily confirmed cases and deaths change
over time. Essentially, we'll be performed a time series. The plot in
the code block below will have jumps that we will smoothen out in the
second code block. The first is kind of to see for ourselves the jags,
which will help us realize the *need* for a moving average!

```{r}

plot <- df.main %>% 
  group_by(state, date) %>% 
  arrange(state, date) %>% 
  mutate_at(.tbl = .,
            .vars = c("confirmed_daily_cases", "death_daily_cases"),
            .funs = function(x){ifelse(is.na(x), 0, x)}) %>% 
  pivot_longer(data = .,
               cols = c("confirmed_daily_cases", "death_daily_cases"),
               names_to = "daily_cases",
               values_to = "values") %>% 
  ggplot(mapping = aes(x = date,
                       y = values,
                       color = daily_cases)) +
  geom_line(show.legend = F) + 
  facet_wrap(region ~ ., scales = "free")

print(plot)

```

**Results:**

-   Here, you will see that our first time series have jumps since
    missing values and negative were replaced with zeros earlier in the
    data cleaning because there were inconsistencies in the reporting of
    data by states.

-   Instead, we use a moving average to smooth out these jumps.

```{r}
library(zoo)

df.main <- df.main %>% 
  group_by(state, date) %>% 
  arrange(state, date) %>% 
  mutate_at(.tbl = .,
            .vars = c("confirmed_daily_cases", "death_daily_cases"),
            .funs = function(x){ifelse(is.na(x), 0, x)})


df.main <- df.main %>% 
  arrange(state, date) %>% 
  group_by(state) %>% 
  mutate( across( .cols = c(confirmed_daily_cases, death_daily_cases),
                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, 
                              align = "right", na.rm = TRUE),
      .names = "{.col} 7d Avg")) %>% 
  ungroup()

df.main <- df.main %>% 
  arrange(state, date) %>% 
  group_by(state) %>% 
  mutate( across( .cols = c(confirmed_daily_cases, death_daily_cases),
                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, 
                              align = "right", na.rm = TRUE),
      .names = "{.col} 7d Avg")) %>% 
  ungroup()

# data validation 
validate_dailyCases <- df.main %>% 
  filter(is.na(`confirmed_daily_cases 7d Avg`)) %>% 
  select(`confirmed_daily_cases 7d Avg`) %>% 
  nrow()

validate_deaths <- df.main %>% 
  filter(is.na(`death_daily_cases 7d Avg`)) %>% 
  select(`death_daily_cases 7d Avg`) %>% 
  nrow()


# Plot for each region:
plot1 <- df.main %>% 
  pivot_longer(data = .,
               cols =
                 c(`confirmed_daily_cases 7d Avg`, `death_daily_cases 7d Avg`),
               names_to = "daily_cases",
               values_to = "values") %>% 
  ggplot(mapping = aes(x = date,
                       y = values,
                       color = daily_cases)) +
  geom_line(show.legend = F, alpha = 0.7) + 
  scale_fill_viridis_d() +
  facet_wrap(region ~ ., scales = "free")

print(plot1)

# Plot:
plot <- map(.x = region_group, 
    .f = ~ plot7DayAverage(region.group = .x))

print(plot)
```

**Features:**

-   We added a 7 day moving average columns for the
    `confirmed_daily_cases` and `death_daily_cases` to the `df.main`

-   The plot returned from the code block should show the smoothed time
    series for the pandemic dynamics.

## Question 4: Is there a connection between state wealth, state population, confirmed cases and deaths?

I'll reframe a bit: Do state wealth and/or state population have an
effect on total percentage of confirmed cases and deaths?

Though we cannot say it DOES, but plotting the scatterplot will show if
there is some kind of relationship that we can notice ourselves.

```{r}

plot <- df.main %>% 
  filter(date == max_date) %>% 
  ggplot(aes(x = `confirmed total %`,
             y = `death total %`,
             size = population_in_mil,
             color = gdp_per_capita)) +
  geom_point(alpha = 0.75,
             show.legend = T) +
  facet_wrap(. ~ region, scales = "free") +
  scale_color_gradient(low="brown1", high="green") +
  scale_size_area(max_size = 30) +
  theme_minimal() +
  xlab("Total Confirmed Cases %") +
  ylab("Total Deaths %") +
  ggtitle("Total Confirmed Cases and Total Deaths % VS GDP and population") +
  theme(plot.title = element_text(hjust = 0.5))

filename <- file.path(paste0("./explore/04_total_confirmed_deaths_perc_gdp_pop_and_scatter.png"))

# Save plot
ggsave(filename = filename,
       plot = plot,
       width = 35, height = 25, units = "cm",
       dpi = 1200)

print(plot)

```

**Features:**

-   We plot scatter-plots to try to visualize the relationship.

-   These plots are saved in the `./explore` directory as well.

## Question 5: Does vaccination help fighting the COVID-19 pandemic? i.e does vaccination help decrease covid-19 confirmed cases and death toll?

```{r}
plot <- map(.x = region_group,
    .f = ~ plot_vaccineDosesTotal_7DayAVg(region.group = .x))
print(plot)

```

**Features:**

-   Here, we plot the moving averages of the cummulative sum of vaccine
    doses already calculated from before to see the trend of the does,
    confirmed cases and death toll.

## Question 6: Can you see the effect of government response against COVID-19 pandemic?

Here we show on map how number of COVID-case have changed over time
(monthly).

```{r}

# add date id and snapshot flag
df.main <- df.main %>% 
  arrange(state, date) %>% 
  # date id per state:
  group_by(state) %>% 
  mutate(date_id = row_number()) %>% 
  ungroup() %>% 
  # add date snapshot flag for every 30th day:
  mutate(date_snapshot_flag = case_when(date_id == 1 ~ TRUE,
                                       date_id == max_date ~ TRUE,
                                       date_id %% 30 == 0 ~ TRUE,
                                       TRUE ~ FALSE))

# plot the maps:
variables <- c("confirmed_total", "deaths_total", "vaccine_doses_total")

plots <- map(variables, ~ plotCovid19Map_overTime(df.main, .x))


print(plots)

```

**Features:**

-   A new columns for the date flag for every 30th day (month) is
    created.

-   Stacked area charts of covid 19 indicators in a log-scale time
    series are shown, as well as the government response metrics.

## Question 7: How High was the response rate of each state towards pandemic?

We sort by state, date then the stringency index, grouping by state and
seeing the stacked area charts of the stringency index for display.

```{r}
wStringencyIndex <- df.main %>% 
  arrange(state, date, stringency_index_for_display) %>% 
  # date id per state:
  group_by(state) %>% 
  mutate(date_id = row_number()) %>% 
  ungroup() %>% 
  # add date snapshot flag for every 30th day:
  mutate(date_snapshot_flag = case_when(date_id == 1 ~ TRUE,
                                        date_id == max_date ~ TRUE,
                                        date_id %% 30 == 0 ~ TRUE,
                                        TRUE ~ FALSE))

plots <- map("stringency_index_for_display",
             ~ plotCovid19Map_overTime(df.main, .x))


print(plots)
```

## Question 7: How each state is doing on a state level: How selected states are coping with the pandemic over time?

Here we look at the vaccine smoothed daily counts by creating first the
7 day moving average column and plotting for some states here:
California, Texas, New York are used as examples.

```{r}
## vaccine smoothed daily counts:
df.main <- df.main %>% 
  arrange(state, date) %>% 
  group_by(state) %>% 
  mutate(across( .cols = daily_vacc_doses,
                  ~ rollapply(data = ., width = 7, FUN = mean, fill = NA, 
                              align = "right", na.rm = TRUE),
                 .names = "{.col} 7d Avg")) %>% 
  ungroup()



plotCovid19Indicators_stateLevel(data = df.main, state_selection = "California")
plotCovid19Indicators_stateLevel(data = df.main, state_selection = "New York")
plotCovid19Indicators_stateLevel(data = df.main, state_selection = "Texas")
plotCovid19Indicators_stateLevel(data = df.main, state_selection = "Nebraska")





```

# Export Data

I exported the data cleaned, merged and with the newly created columns
in this EDA, if you would like to perform more analysis. You should be
able to see it in my github repo as `df-main.csv` file.

```{r}
write_csv(x = df.main, file = "df-main.csv")
```
